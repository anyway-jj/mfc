
lab10_ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001be0  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08001d78  08001d78  00011d78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001d88  08001d88  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08001d88  08001d88  00011d88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001d90  08001d90  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001d90  08001d90  00011d90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001d94  08001d94  00011d94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001d98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000003c  20000010  08001da4  00020010  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000004c  08001da4  0002004c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000034cc  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000d38  00000000  00000000  00023508  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000003b8  00000000  00000000  00024240  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000340  00000000  00000000  000245f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013fd9  00000000  00000000  00024938  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000401d  00000000  00000000  00038911  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007e1e4  00000000  00000000  0003c92e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000bab12  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000e6c  00000000  00000000  000bab64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000010 	.word	0x20000010
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08001d60 	.word	0x08001d60

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000014 	.word	0x20000014
 80001d4:	08001d60 	.word	0x08001d60

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__aeabi_d2iz>:
 8000974:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000978:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800097c:	d215      	bcs.n	80009aa <__aeabi_d2iz+0x36>
 800097e:	d511      	bpl.n	80009a4 <__aeabi_d2iz+0x30>
 8000980:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000984:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000988:	d912      	bls.n	80009b0 <__aeabi_d2iz+0x3c>
 800098a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800098e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000992:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000996:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800099a:	fa23 f002 	lsr.w	r0, r3, r2
 800099e:	bf18      	it	ne
 80009a0:	4240      	negne	r0, r0
 80009a2:	4770      	bx	lr
 80009a4:	f04f 0000 	mov.w	r0, #0
 80009a8:	4770      	bx	lr
 80009aa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009ae:	d105      	bne.n	80009bc <__aeabi_d2iz+0x48>
 80009b0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80009b4:	bf08      	it	eq
 80009b6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80009ba:	4770      	bx	lr
 80009bc:	f04f 0000 	mov.w	r0, #0
 80009c0:	4770      	bx	lr
 80009c2:	bf00      	nop

080009c4 <__aeabi_uldivmod>:
 80009c4:	b953      	cbnz	r3, 80009dc <__aeabi_uldivmod+0x18>
 80009c6:	b94a      	cbnz	r2, 80009dc <__aeabi_uldivmod+0x18>
 80009c8:	2900      	cmp	r1, #0
 80009ca:	bf08      	it	eq
 80009cc:	2800      	cmpeq	r0, #0
 80009ce:	bf1c      	itt	ne
 80009d0:	f04f 31ff 	movne.w	r1, #4294967295
 80009d4:	f04f 30ff 	movne.w	r0, #4294967295
 80009d8:	f000 b974 	b.w	8000cc4 <__aeabi_idiv0>
 80009dc:	f1ad 0c08 	sub.w	ip, sp, #8
 80009e0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009e4:	f000 f806 	bl	80009f4 <__udivmoddi4>
 80009e8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009f0:	b004      	add	sp, #16
 80009f2:	4770      	bx	lr

080009f4 <__udivmoddi4>:
 80009f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009f8:	9d08      	ldr	r5, [sp, #32]
 80009fa:	4604      	mov	r4, r0
 80009fc:	468e      	mov	lr, r1
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d14d      	bne.n	8000a9e <__udivmoddi4+0xaa>
 8000a02:	428a      	cmp	r2, r1
 8000a04:	4694      	mov	ip, r2
 8000a06:	d969      	bls.n	8000adc <__udivmoddi4+0xe8>
 8000a08:	fab2 f282 	clz	r2, r2
 8000a0c:	b152      	cbz	r2, 8000a24 <__udivmoddi4+0x30>
 8000a0e:	fa01 f302 	lsl.w	r3, r1, r2
 8000a12:	f1c2 0120 	rsb	r1, r2, #32
 8000a16:	fa20 f101 	lsr.w	r1, r0, r1
 8000a1a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a1e:	ea41 0e03 	orr.w	lr, r1, r3
 8000a22:	4094      	lsls	r4, r2
 8000a24:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a28:	0c21      	lsrs	r1, r4, #16
 8000a2a:	fbbe f6f8 	udiv	r6, lr, r8
 8000a2e:	fa1f f78c 	uxth.w	r7, ip
 8000a32:	fb08 e316 	mls	r3, r8, r6, lr
 8000a36:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000a3a:	fb06 f107 	mul.w	r1, r6, r7
 8000a3e:	4299      	cmp	r1, r3
 8000a40:	d90a      	bls.n	8000a58 <__udivmoddi4+0x64>
 8000a42:	eb1c 0303 	adds.w	r3, ip, r3
 8000a46:	f106 30ff 	add.w	r0, r6, #4294967295
 8000a4a:	f080 811f 	bcs.w	8000c8c <__udivmoddi4+0x298>
 8000a4e:	4299      	cmp	r1, r3
 8000a50:	f240 811c 	bls.w	8000c8c <__udivmoddi4+0x298>
 8000a54:	3e02      	subs	r6, #2
 8000a56:	4463      	add	r3, ip
 8000a58:	1a5b      	subs	r3, r3, r1
 8000a5a:	b2a4      	uxth	r4, r4
 8000a5c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a60:	fb08 3310 	mls	r3, r8, r0, r3
 8000a64:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a68:	fb00 f707 	mul.w	r7, r0, r7
 8000a6c:	42a7      	cmp	r7, r4
 8000a6e:	d90a      	bls.n	8000a86 <__udivmoddi4+0x92>
 8000a70:	eb1c 0404 	adds.w	r4, ip, r4
 8000a74:	f100 33ff 	add.w	r3, r0, #4294967295
 8000a78:	f080 810a 	bcs.w	8000c90 <__udivmoddi4+0x29c>
 8000a7c:	42a7      	cmp	r7, r4
 8000a7e:	f240 8107 	bls.w	8000c90 <__udivmoddi4+0x29c>
 8000a82:	4464      	add	r4, ip
 8000a84:	3802      	subs	r0, #2
 8000a86:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000a8a:	1be4      	subs	r4, r4, r7
 8000a8c:	2600      	movs	r6, #0
 8000a8e:	b11d      	cbz	r5, 8000a98 <__udivmoddi4+0xa4>
 8000a90:	40d4      	lsrs	r4, r2
 8000a92:	2300      	movs	r3, #0
 8000a94:	e9c5 4300 	strd	r4, r3, [r5]
 8000a98:	4631      	mov	r1, r6
 8000a9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a9e:	428b      	cmp	r3, r1
 8000aa0:	d909      	bls.n	8000ab6 <__udivmoddi4+0xc2>
 8000aa2:	2d00      	cmp	r5, #0
 8000aa4:	f000 80ef 	beq.w	8000c86 <__udivmoddi4+0x292>
 8000aa8:	2600      	movs	r6, #0
 8000aaa:	e9c5 0100 	strd	r0, r1, [r5]
 8000aae:	4630      	mov	r0, r6
 8000ab0:	4631      	mov	r1, r6
 8000ab2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ab6:	fab3 f683 	clz	r6, r3
 8000aba:	2e00      	cmp	r6, #0
 8000abc:	d14a      	bne.n	8000b54 <__udivmoddi4+0x160>
 8000abe:	428b      	cmp	r3, r1
 8000ac0:	d302      	bcc.n	8000ac8 <__udivmoddi4+0xd4>
 8000ac2:	4282      	cmp	r2, r0
 8000ac4:	f200 80f9 	bhi.w	8000cba <__udivmoddi4+0x2c6>
 8000ac8:	1a84      	subs	r4, r0, r2
 8000aca:	eb61 0303 	sbc.w	r3, r1, r3
 8000ace:	2001      	movs	r0, #1
 8000ad0:	469e      	mov	lr, r3
 8000ad2:	2d00      	cmp	r5, #0
 8000ad4:	d0e0      	beq.n	8000a98 <__udivmoddi4+0xa4>
 8000ad6:	e9c5 4e00 	strd	r4, lr, [r5]
 8000ada:	e7dd      	b.n	8000a98 <__udivmoddi4+0xa4>
 8000adc:	b902      	cbnz	r2, 8000ae0 <__udivmoddi4+0xec>
 8000ade:	deff      	udf	#255	; 0xff
 8000ae0:	fab2 f282 	clz	r2, r2
 8000ae4:	2a00      	cmp	r2, #0
 8000ae6:	f040 8092 	bne.w	8000c0e <__udivmoddi4+0x21a>
 8000aea:	eba1 010c 	sub.w	r1, r1, ip
 8000aee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000af2:	fa1f fe8c 	uxth.w	lr, ip
 8000af6:	2601      	movs	r6, #1
 8000af8:	0c20      	lsrs	r0, r4, #16
 8000afa:	fbb1 f3f7 	udiv	r3, r1, r7
 8000afe:	fb07 1113 	mls	r1, r7, r3, r1
 8000b02:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b06:	fb0e f003 	mul.w	r0, lr, r3
 8000b0a:	4288      	cmp	r0, r1
 8000b0c:	d908      	bls.n	8000b20 <__udivmoddi4+0x12c>
 8000b0e:	eb1c 0101 	adds.w	r1, ip, r1
 8000b12:	f103 38ff 	add.w	r8, r3, #4294967295
 8000b16:	d202      	bcs.n	8000b1e <__udivmoddi4+0x12a>
 8000b18:	4288      	cmp	r0, r1
 8000b1a:	f200 80cb 	bhi.w	8000cb4 <__udivmoddi4+0x2c0>
 8000b1e:	4643      	mov	r3, r8
 8000b20:	1a09      	subs	r1, r1, r0
 8000b22:	b2a4      	uxth	r4, r4
 8000b24:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b28:	fb07 1110 	mls	r1, r7, r0, r1
 8000b2c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000b30:	fb0e fe00 	mul.w	lr, lr, r0
 8000b34:	45a6      	cmp	lr, r4
 8000b36:	d908      	bls.n	8000b4a <__udivmoddi4+0x156>
 8000b38:	eb1c 0404 	adds.w	r4, ip, r4
 8000b3c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b40:	d202      	bcs.n	8000b48 <__udivmoddi4+0x154>
 8000b42:	45a6      	cmp	lr, r4
 8000b44:	f200 80bb 	bhi.w	8000cbe <__udivmoddi4+0x2ca>
 8000b48:	4608      	mov	r0, r1
 8000b4a:	eba4 040e 	sub.w	r4, r4, lr
 8000b4e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000b52:	e79c      	b.n	8000a8e <__udivmoddi4+0x9a>
 8000b54:	f1c6 0720 	rsb	r7, r6, #32
 8000b58:	40b3      	lsls	r3, r6
 8000b5a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000b5e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000b62:	fa20 f407 	lsr.w	r4, r0, r7
 8000b66:	fa01 f306 	lsl.w	r3, r1, r6
 8000b6a:	431c      	orrs	r4, r3
 8000b6c:	40f9      	lsrs	r1, r7
 8000b6e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000b72:	fa00 f306 	lsl.w	r3, r0, r6
 8000b76:	fbb1 f8f9 	udiv	r8, r1, r9
 8000b7a:	0c20      	lsrs	r0, r4, #16
 8000b7c:	fa1f fe8c 	uxth.w	lr, ip
 8000b80:	fb09 1118 	mls	r1, r9, r8, r1
 8000b84:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b88:	fb08 f00e 	mul.w	r0, r8, lr
 8000b8c:	4288      	cmp	r0, r1
 8000b8e:	fa02 f206 	lsl.w	r2, r2, r6
 8000b92:	d90b      	bls.n	8000bac <__udivmoddi4+0x1b8>
 8000b94:	eb1c 0101 	adds.w	r1, ip, r1
 8000b98:	f108 3aff 	add.w	sl, r8, #4294967295
 8000b9c:	f080 8088 	bcs.w	8000cb0 <__udivmoddi4+0x2bc>
 8000ba0:	4288      	cmp	r0, r1
 8000ba2:	f240 8085 	bls.w	8000cb0 <__udivmoddi4+0x2bc>
 8000ba6:	f1a8 0802 	sub.w	r8, r8, #2
 8000baa:	4461      	add	r1, ip
 8000bac:	1a09      	subs	r1, r1, r0
 8000bae:	b2a4      	uxth	r4, r4
 8000bb0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000bb4:	fb09 1110 	mls	r1, r9, r0, r1
 8000bb8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000bbc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000bc0:	458e      	cmp	lr, r1
 8000bc2:	d908      	bls.n	8000bd6 <__udivmoddi4+0x1e2>
 8000bc4:	eb1c 0101 	adds.w	r1, ip, r1
 8000bc8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000bcc:	d26c      	bcs.n	8000ca8 <__udivmoddi4+0x2b4>
 8000bce:	458e      	cmp	lr, r1
 8000bd0:	d96a      	bls.n	8000ca8 <__udivmoddi4+0x2b4>
 8000bd2:	3802      	subs	r0, #2
 8000bd4:	4461      	add	r1, ip
 8000bd6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000bda:	fba0 9402 	umull	r9, r4, r0, r2
 8000bde:	eba1 010e 	sub.w	r1, r1, lr
 8000be2:	42a1      	cmp	r1, r4
 8000be4:	46c8      	mov	r8, r9
 8000be6:	46a6      	mov	lr, r4
 8000be8:	d356      	bcc.n	8000c98 <__udivmoddi4+0x2a4>
 8000bea:	d053      	beq.n	8000c94 <__udivmoddi4+0x2a0>
 8000bec:	b15d      	cbz	r5, 8000c06 <__udivmoddi4+0x212>
 8000bee:	ebb3 0208 	subs.w	r2, r3, r8
 8000bf2:	eb61 010e 	sbc.w	r1, r1, lr
 8000bf6:	fa01 f707 	lsl.w	r7, r1, r7
 8000bfa:	fa22 f306 	lsr.w	r3, r2, r6
 8000bfe:	40f1      	lsrs	r1, r6
 8000c00:	431f      	orrs	r7, r3
 8000c02:	e9c5 7100 	strd	r7, r1, [r5]
 8000c06:	2600      	movs	r6, #0
 8000c08:	4631      	mov	r1, r6
 8000c0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c0e:	f1c2 0320 	rsb	r3, r2, #32
 8000c12:	40d8      	lsrs	r0, r3
 8000c14:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c18:	fa21 f303 	lsr.w	r3, r1, r3
 8000c1c:	4091      	lsls	r1, r2
 8000c1e:	4301      	orrs	r1, r0
 8000c20:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c24:	fa1f fe8c 	uxth.w	lr, ip
 8000c28:	fbb3 f0f7 	udiv	r0, r3, r7
 8000c2c:	fb07 3610 	mls	r6, r7, r0, r3
 8000c30:	0c0b      	lsrs	r3, r1, #16
 8000c32:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000c36:	fb00 f60e 	mul.w	r6, r0, lr
 8000c3a:	429e      	cmp	r6, r3
 8000c3c:	fa04 f402 	lsl.w	r4, r4, r2
 8000c40:	d908      	bls.n	8000c54 <__udivmoddi4+0x260>
 8000c42:	eb1c 0303 	adds.w	r3, ip, r3
 8000c46:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c4a:	d22f      	bcs.n	8000cac <__udivmoddi4+0x2b8>
 8000c4c:	429e      	cmp	r6, r3
 8000c4e:	d92d      	bls.n	8000cac <__udivmoddi4+0x2b8>
 8000c50:	3802      	subs	r0, #2
 8000c52:	4463      	add	r3, ip
 8000c54:	1b9b      	subs	r3, r3, r6
 8000c56:	b289      	uxth	r1, r1
 8000c58:	fbb3 f6f7 	udiv	r6, r3, r7
 8000c5c:	fb07 3316 	mls	r3, r7, r6, r3
 8000c60:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c64:	fb06 f30e 	mul.w	r3, r6, lr
 8000c68:	428b      	cmp	r3, r1
 8000c6a:	d908      	bls.n	8000c7e <__udivmoddi4+0x28a>
 8000c6c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c70:	f106 38ff 	add.w	r8, r6, #4294967295
 8000c74:	d216      	bcs.n	8000ca4 <__udivmoddi4+0x2b0>
 8000c76:	428b      	cmp	r3, r1
 8000c78:	d914      	bls.n	8000ca4 <__udivmoddi4+0x2b0>
 8000c7a:	3e02      	subs	r6, #2
 8000c7c:	4461      	add	r1, ip
 8000c7e:	1ac9      	subs	r1, r1, r3
 8000c80:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000c84:	e738      	b.n	8000af8 <__udivmoddi4+0x104>
 8000c86:	462e      	mov	r6, r5
 8000c88:	4628      	mov	r0, r5
 8000c8a:	e705      	b.n	8000a98 <__udivmoddi4+0xa4>
 8000c8c:	4606      	mov	r6, r0
 8000c8e:	e6e3      	b.n	8000a58 <__udivmoddi4+0x64>
 8000c90:	4618      	mov	r0, r3
 8000c92:	e6f8      	b.n	8000a86 <__udivmoddi4+0x92>
 8000c94:	454b      	cmp	r3, r9
 8000c96:	d2a9      	bcs.n	8000bec <__udivmoddi4+0x1f8>
 8000c98:	ebb9 0802 	subs.w	r8, r9, r2
 8000c9c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ca0:	3801      	subs	r0, #1
 8000ca2:	e7a3      	b.n	8000bec <__udivmoddi4+0x1f8>
 8000ca4:	4646      	mov	r6, r8
 8000ca6:	e7ea      	b.n	8000c7e <__udivmoddi4+0x28a>
 8000ca8:	4620      	mov	r0, r4
 8000caa:	e794      	b.n	8000bd6 <__udivmoddi4+0x1e2>
 8000cac:	4640      	mov	r0, r8
 8000cae:	e7d1      	b.n	8000c54 <__udivmoddi4+0x260>
 8000cb0:	46d0      	mov	r8, sl
 8000cb2:	e77b      	b.n	8000bac <__udivmoddi4+0x1b8>
 8000cb4:	3b02      	subs	r3, #2
 8000cb6:	4461      	add	r1, ip
 8000cb8:	e732      	b.n	8000b20 <__udivmoddi4+0x12c>
 8000cba:	4630      	mov	r0, r6
 8000cbc:	e709      	b.n	8000ad2 <__udivmoddi4+0xde>
 8000cbe:	4464      	add	r4, ip
 8000cc0:	3802      	subs	r0, #2
 8000cc2:	e742      	b.n	8000b4a <__udivmoddi4+0x156>

08000cc4 <__aeabi_idiv0>:
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ccc:	f000 faa0 	bl	8001210 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cd0:	f000 f894 	bl	8000dfc <SystemClock_Config>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  /* USER CODE BEGIN 2 */
  RCC->AHB1ENR |= RCC_AHB1ENR_GPIOCEN | RCC_AHB1ENR_GPIOAEN;
 8000cd4:	4b41      	ldr	r3, [pc, #260]	; (8000ddc <main+0x114>)
 8000cd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd8:	4a40      	ldr	r2, [pc, #256]	; (8000ddc <main+0x114>)
 8000cda:	f043 0305 	orr.w	r3, r3, #5
 8000cde:	6313      	str	r3, [r2, #48]	; 0x30
  RCC->APB2ENR |= RCC_APB2ENR_USART1EN | RCC_APB2ENR_ADC1EN;
 8000ce0:	4b3e      	ldr	r3, [pc, #248]	; (8000ddc <main+0x114>)
 8000ce2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ce4:	4a3d      	ldr	r2, [pc, #244]	; (8000ddc <main+0x114>)
 8000ce6:	f443 7388 	orr.w	r3, r3, #272	; 0x110
 8000cea:	6453      	str	r3, [r2, #68]	; 0x44

  ADC1->CR1 = ADC_CR1_SCAN | ADC_CR1_JAUTO;
 8000cec:	4b3c      	ldr	r3, [pc, #240]	; (8000de0 <main+0x118>)
 8000cee:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 8000cf2:	605a      	str	r2, [r3, #4]
  ADC1->CR2 = ADC_CR2_CONT | ADC_CR2_ADON;
 8000cf4:	4b3a      	ldr	r3, [pc, #232]	; (8000de0 <main+0x118>)
 8000cf6:	2203      	movs	r2, #3
 8000cf8:	609a      	str	r2, [r3, #8]
  ADC1->SQR1 = (0b0001 << ADC_SQR1_L_Pos);
 8000cfa:	4b39      	ldr	r3, [pc, #228]	; (8000de0 <main+0x118>)
 8000cfc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000d00:	62da      	str	r2, [r3, #44]	; 0x2c
  ADC1->SQR3 = (0b00101 << ADC_SQR3_SQ1_Pos);
 8000d02:	4b37      	ldr	r3, [pc, #220]	; (8000de0 <main+0x118>)
 8000d04:	2205      	movs	r2, #5
 8000d06:	635a      	str	r2, [r3, #52]	; 0x34
  ADC1->JSQR = (0b00 << ADC_JSQR_JL_Pos) | (0b00110 << ADC_JSQR_JSQ4_Pos);
 8000d08:	4b35      	ldr	r3, [pc, #212]	; (8000de0 <main+0x118>)
 8000d0a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000d0e:	639a      	str	r2, [r3, #56]	; 0x38
  ADC1->SMPR2 = (0b111 << ADC_SMPR2_SMP5_Pos) | (0b111 << ADC_SMPR2_SMP6_Pos);
 8000d10:	4b33      	ldr	r3, [pc, #204]	; (8000de0 <main+0x118>)
 8000d12:	f44f 12fc 	mov.w	r2, #2064384	; 0x1f8000
 8000d16:	611a      	str	r2, [r3, #16]

  GPIOA->AFR[1] |= (0b0111 << GPIO_AFRH_AFSEL10_Pos) | (0b0111 << GPIO_AFRH_AFSEL9_Pos);
 8000d18:	4b32      	ldr	r3, [pc, #200]	; (8000de4 <main+0x11c>)
 8000d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d1c:	4a31      	ldr	r2, [pc, #196]	; (8000de4 <main+0x11c>)
 8000d1e:	f443 63ee 	orr.w	r3, r3, #1904	; 0x770
 8000d22:	6253      	str	r3, [r2, #36]	; 0x24
  GPIOA->MODER |= (0b11 << GPIO_MODER_MODE5_Pos) | (0b11 << GPIO_MODER_MODE6_Pos) | (0b10 << GPIO_MODER_MODE10_Pos) | (0b10 << GPIO_MODER_MODE9_Pos);
 8000d24:	4b2f      	ldr	r3, [pc, #188]	; (8000de4 <main+0x11c>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	4a2e      	ldr	r2, [pc, #184]	; (8000de4 <main+0x11c>)
 8000d2a:	f443 1320 	orr.w	r3, r3, #2621440	; 0x280000
 8000d2e:	f443 5370 	orr.w	r3, r3, #15360	; 0x3c00
 8000d32:	6013      	str	r3, [r2, #0]

  USART1->CR1 = USART_CR1_UE | USART_CR1_TE;
 8000d34:	4b2c      	ldr	r3, [pc, #176]	; (8000de8 <main+0x120>)
 8000d36:	f242 0208 	movw	r2, #8200	; 0x2008
 8000d3a:	60da      	str	r2, [r3, #12]
  USART1->BRR = 1667;
 8000d3c:	4b2a      	ldr	r3, [pc, #168]	; (8000de8 <main+0x120>)
 8000d3e:	f240 6283 	movw	r2, #1667	; 0x683
 8000d42:	609a      	str	r2, [r3, #8]

  SYSCFG->EXTICR[0] = (0b0000 << SYSCFG_EXTICR1_EXTI0_Pos);
 8000d44:	4b29      	ldr	r3, [pc, #164]	; (8000dec <main+0x124>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	609a      	str	r2, [r3, #8]
  GPIOA->PUPDR |= (0b01 << GPIO_PUPDR_PUPD0_Pos);
 8000d4a:	4b26      	ldr	r3, [pc, #152]	; (8000de4 <main+0x11c>)
 8000d4c:	68db      	ldr	r3, [r3, #12]
 8000d4e:	4a25      	ldr	r2, [pc, #148]	; (8000de4 <main+0x11c>)
 8000d50:	f043 0301 	orr.w	r3, r3, #1
 8000d54:	60d3      	str	r3, [r2, #12]
  EXTI->IMR = EXTI_IMR_MR0;
 8000d56:	4b26      	ldr	r3, [pc, #152]	; (8000df0 <main+0x128>)
 8000d58:	2201      	movs	r2, #1
 8000d5a:	601a      	str	r2, [r3, #0]
  EXTI->FTSR = EXTI_FTSR_TR0;
 8000d5c:	4b24      	ldr	r3, [pc, #144]	; (8000df0 <main+0x128>)
 8000d5e:	2201      	movs	r2, #1
 8000d60:	60da      	str	r2, [r3, #12]
  NVIC->ISER[0] |= 1 << 6;
 8000d62:	4b24      	ldr	r3, [pc, #144]	; (8000df4 <main+0x12c>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	4a23      	ldr	r2, [pc, #140]	; (8000df4 <main+0x12c>)
 8000d68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d6c:	6013      	str	r3, [r2, #0]

  ADC1->CR2 |= ADC_CR2_SWSTART;
 8000d6e:	4b1c      	ldr	r3, [pc, #112]	; (8000de0 <main+0x118>)
 8000d70:	689b      	ldr	r3, [r3, #8]
 8000d72:	4a1b      	ldr	r2, [pc, #108]	; (8000de0 <main+0x118>)
 8000d74:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000d78:	6093      	str	r3, [r2, #8]
  while (1)
  {
    /* USER CODE END WHILE */

	/* USER CODE BEGIN 3 */
	while((ADC1->SR & ADC_SR_EOC) != ADC_SR_EOC);
 8000d7a:	bf00      	nop
 8000d7c:	4b18      	ldr	r3, [pc, #96]	; (8000de0 <main+0x118>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	f003 0302 	and.w	r3, r3, #2
 8000d84:	2b02      	cmp	r3, #2
 8000d86:	d1f9      	bne.n	8000d7c <main+0xb4>
	temp = ADC1->DR;
 8000d88:	4b15      	ldr	r3, [pc, #84]	; (8000de0 <main+0x118>)
 8000d8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d8c:	461a      	mov	r2, r3
 8000d8e:	4b1a      	ldr	r3, [pc, #104]	; (8000df8 <main+0x130>)
 8000d90:	601a      	str	r2, [r3, #0]
	send_title_Ux_Uy();
 8000d92:	f000 f8ab 	bl	8000eec <send_title_Ux_Uy>
	//send_temp_value(); //если хотите отправить значение из регистра АЦП, а не напряжение, то расскоментируйте это и закомментируйте send_voltage();
	send_voltage();
 8000d96:	f000 f8c7 	bl	8000f28 <send_voltage>
	send_ascii_code(0x7C);
 8000d9a:	207c      	movs	r0, #124	; 0x7c
 8000d9c:	f000 f88e 	bl	8000ebc <send_ascii_code>
	while((ADC1->SR & ADC_SR_JEOC) != ADC_SR_JEOC);
 8000da0:	bf00      	nop
 8000da2:	4b0f      	ldr	r3, [pc, #60]	; (8000de0 <main+0x118>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	f003 0304 	and.w	r3, r3, #4
 8000daa:	2b04      	cmp	r3, #4
 8000dac:	d1f9      	bne.n	8000da2 <main+0xda>
	ADC1->SR &= ~ADC_SR_JEOC;
 8000dae:	4b0c      	ldr	r3, [pc, #48]	; (8000de0 <main+0x118>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	4a0b      	ldr	r2, [pc, #44]	; (8000de0 <main+0x118>)
 8000db4:	f023 0304 	bic.w	r3, r3, #4
 8000db8:	6013      	str	r3, [r2, #0]
	temp = ADC1->JDR1;
 8000dba:	4b09      	ldr	r3, [pc, #36]	; (8000de0 <main+0x118>)
 8000dbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000dbe:	461a      	mov	r2, r3
 8000dc0:	4b0d      	ldr	r3, [pc, #52]	; (8000df8 <main+0x130>)
 8000dc2:	601a      	str	r2, [r3, #0]
	//send_temp_value(); //если хотите отправить значение из регистра АЦП, а не напряжение, то расскоментируйте это и закомментируйте send_voltage();
	send_voltage();
 8000dc4:	f000 f8b0 	bl	8000f28 <send_voltage>
	send_ascii_code(32);
 8000dc8:	2020      	movs	r0, #32
 8000dca:	f000 f877 	bl	8000ebc <send_ascii_code>
	send_ascii_code(86);
 8000dce:	2056      	movs	r0, #86	; 0x56
 8000dd0:	f000 f874 	bl	8000ebc <send_ascii_code>
	send_ascii_code(0xA);
 8000dd4:	200a      	movs	r0, #10
 8000dd6:	f000 f871 	bl	8000ebc <send_ascii_code>
	while((ADC1->SR & ADC_SR_EOC) != ADC_SR_EOC);
 8000dda:	e7ce      	b.n	8000d7a <main+0xb2>
 8000ddc:	40023800 	.word	0x40023800
 8000de0:	40012000 	.word	0x40012000
 8000de4:	40020000 	.word	0x40020000
 8000de8:	40011000 	.word	0x40011000
 8000dec:	40013800 	.word	0x40013800
 8000df0:	40013c00 	.word	0x40013c00
 8000df4:	e000e100 	.word	0xe000e100
 8000df8:	2000002c 	.word	0x2000002c

08000dfc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b094      	sub	sp, #80	; 0x50
 8000e00:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e02:	f107 0320 	add.w	r3, r7, #32
 8000e06:	2230      	movs	r2, #48	; 0x30
 8000e08:	2100      	movs	r1, #0
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f000 ffa0 	bl	8001d50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e10:	f107 030c 	add.w	r3, r7, #12
 8000e14:	2200      	movs	r2, #0
 8000e16:	601a      	str	r2, [r3, #0]
 8000e18:	605a      	str	r2, [r3, #4]
 8000e1a:	609a      	str	r2, [r3, #8]
 8000e1c:	60da      	str	r2, [r3, #12]
 8000e1e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e20:	2300      	movs	r3, #0
 8000e22:	60bb      	str	r3, [r7, #8]
 8000e24:	4b23      	ldr	r3, [pc, #140]	; (8000eb4 <SystemClock_Config+0xb8>)
 8000e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e28:	4a22      	ldr	r2, [pc, #136]	; (8000eb4 <SystemClock_Config+0xb8>)
 8000e2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e2e:	6413      	str	r3, [r2, #64]	; 0x40
 8000e30:	4b20      	ldr	r3, [pc, #128]	; (8000eb4 <SystemClock_Config+0xb8>)
 8000e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e38:	60bb      	str	r3, [r7, #8]
 8000e3a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	607b      	str	r3, [r7, #4]
 8000e40:	4b1d      	ldr	r3, [pc, #116]	; (8000eb8 <SystemClock_Config+0xbc>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000e48:	4a1b      	ldr	r2, [pc, #108]	; (8000eb8 <SystemClock_Config+0xbc>)
 8000e4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e4e:	6013      	str	r3, [r2, #0]
 8000e50:	4b19      	ldr	r3, [pc, #100]	; (8000eb8 <SystemClock_Config+0xbc>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000e58:	607b      	str	r3, [r7, #4]
 8000e5a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e5c:	2302      	movs	r3, #2
 8000e5e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e60:	2301      	movs	r3, #1
 8000e62:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e64:	2310      	movs	r3, #16
 8000e66:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e6c:	f107 0320 	add.w	r3, r7, #32
 8000e70:	4618      	mov	r0, r3
 8000e72:	f000 fb25 	bl	80014c0 <HAL_RCC_OscConfig>
 8000e76:	4603      	mov	r3, r0
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d001      	beq.n	8000e80 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000e7c:	f000 f904 	bl	8001088 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e80:	230f      	movs	r3, #15
 8000e82:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000e84:	2300      	movs	r3, #0
 8000e86:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e90:	2300      	movs	r3, #0
 8000e92:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000e94:	f107 030c 	add.w	r3, r7, #12
 8000e98:	2100      	movs	r1, #0
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f000 fd88 	bl	80019b0 <HAL_RCC_ClockConfig>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d001      	beq.n	8000eaa <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000ea6:	f000 f8ef 	bl	8001088 <Error_Handler>
  }
}
 8000eaa:	bf00      	nop
 8000eac:	3750      	adds	r7, #80	; 0x50
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	40023800 	.word	0x40023800
 8000eb8:	40007000 	.word	0x40007000

08000ebc <send_ascii_code>:

/* USER CODE BEGIN 4 */
void send_ascii_code(char symbol) {
 8000ebc:	b480      	push	{r7}
 8000ebe:	b083      	sub	sp, #12
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	71fb      	strb	r3, [r7, #7]
	while ((USART1->SR & USART_SR_TXE_Msk) != USART_SR_TXE_Msk);
 8000ec6:	bf00      	nop
 8000ec8:	4b07      	ldr	r3, [pc, #28]	; (8000ee8 <send_ascii_code+0x2c>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ed0:	2b80      	cmp	r3, #128	; 0x80
 8000ed2:	d1f9      	bne.n	8000ec8 <send_ascii_code+0xc>
	USART1->DR = symbol;
 8000ed4:	4a04      	ldr	r2, [pc, #16]	; (8000ee8 <send_ascii_code+0x2c>)
 8000ed6:	79fb      	ldrb	r3, [r7, #7]
 8000ed8:	6053      	str	r3, [r2, #4]
}
 8000eda:	bf00      	nop
 8000edc:	370c      	adds	r7, #12
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop
 8000ee8:	40011000 	.word	0x40011000

08000eec <send_title_Ux_Uy>:
void send_title_Ux_Uy(void) {
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0
	send_ascii_code(85);  //U
 8000ef0:	2055      	movs	r0, #85	; 0x55
 8000ef2:	f7ff ffe3 	bl	8000ebc <send_ascii_code>
	send_ascii_code(120); //x
 8000ef6:	2078      	movs	r0, #120	; 0x78
 8000ef8:	f7ff ffe0 	bl	8000ebc <send_ascii_code>
	send_ascii_code(124); //|
 8000efc:	207c      	movs	r0, #124	; 0x7c
 8000efe:	f7ff ffdd 	bl	8000ebc <send_ascii_code>
	send_ascii_code(85);  //U
 8000f02:	2055      	movs	r0, #85	; 0x55
 8000f04:	f7ff ffda 	bl	8000ebc <send_ascii_code>
	send_ascii_code(121); //y
 8000f08:	2079      	movs	r0, #121	; 0x79
 8000f0a:	f7ff ffd7 	bl	8000ebc <send_ascii_code>
	send_ascii_code(32);  //space
 8000f0e:	2020      	movs	r0, #32
 8000f10:	f7ff ffd4 	bl	8000ebc <send_ascii_code>
	send_ascii_code(58);  //:
 8000f14:	203a      	movs	r0, #58	; 0x3a
 8000f16:	f7ff ffd1 	bl	8000ebc <send_ascii_code>
	send_ascii_code(32);  //space
 8000f1a:	2020      	movs	r0, #32
 8000f1c:	f7ff ffce 	bl	8000ebc <send_ascii_code>
}
 8000f20:	bf00      	nop
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	0000      	movs	r0, r0
	...

08000f28 <send_voltage>:
	send_ascii_code(thousands + 48);
	send_ascii_code(hundreds + 48);
	send_ascii_code(tens + 48);
	send_ascii_code(ones + 48);
}
void send_voltage(void) {
 8000f28:	b5b0      	push	{r4, r5, r7, lr}
 8000f2a:	af00      	add	r7, sp, #0
	voltage = ((double)temp * 3.3) / 4096;
 8000f2c:	4b50      	ldr	r3, [pc, #320]	; (8001070 <send_voltage+0x148>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4618      	mov	r0, r3
 8000f32:	f7ff faa3 	bl	800047c <__aeabi_i2d>
 8000f36:	a348      	add	r3, pc, #288	; (adr r3, 8001058 <send_voltage+0x130>)
 8000f38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f3c:	f7ff fb08 	bl	8000550 <__aeabi_dmul>
 8000f40:	4602      	mov	r2, r0
 8000f42:	460b      	mov	r3, r1
 8000f44:	4610      	mov	r0, r2
 8000f46:	4619      	mov	r1, r3
 8000f48:	f04f 0200 	mov.w	r2, #0
 8000f4c:	4b49      	ldr	r3, [pc, #292]	; (8001074 <send_voltage+0x14c>)
 8000f4e:	f7ff fc29 	bl	80007a4 <__aeabi_ddiv>
 8000f52:	4602      	mov	r2, r0
 8000f54:	460b      	mov	r3, r1
 8000f56:	4948      	ldr	r1, [pc, #288]	; (8001078 <send_voltage+0x150>)
 8000f58:	e9c1 2300 	strd	r2, r3, [r1]
	voltage_digit2 = (int)voltage;                                                       //целая часть
 8000f5c:	4b46      	ldr	r3, [pc, #280]	; (8001078 <send_voltage+0x150>)
 8000f5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f62:	4610      	mov	r0, r2
 8000f64:	4619      	mov	r1, r3
 8000f66:	f7ff fd05 	bl	8000974 <__aeabi_d2iz>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	4a43      	ldr	r2, [pc, #268]	; (800107c <send_voltage+0x154>)
 8000f6e:	6013      	str	r3, [r2, #0]
	voltage_digit1 = (int)((voltage - voltage_digit2) / 0.1);                            //десятая часть
 8000f70:	4b41      	ldr	r3, [pc, #260]	; (8001078 <send_voltage+0x150>)
 8000f72:	e9d3 4500 	ldrd	r4, r5, [r3]
 8000f76:	4b41      	ldr	r3, [pc, #260]	; (800107c <send_voltage+0x154>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f7ff fa7e 	bl	800047c <__aeabi_i2d>
 8000f80:	4602      	mov	r2, r0
 8000f82:	460b      	mov	r3, r1
 8000f84:	4620      	mov	r0, r4
 8000f86:	4629      	mov	r1, r5
 8000f88:	f7ff f92a 	bl	80001e0 <__aeabi_dsub>
 8000f8c:	4602      	mov	r2, r0
 8000f8e:	460b      	mov	r3, r1
 8000f90:	4610      	mov	r0, r2
 8000f92:	4619      	mov	r1, r3
 8000f94:	a332      	add	r3, pc, #200	; (adr r3, 8001060 <send_voltage+0x138>)
 8000f96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f9a:	f7ff fc03 	bl	80007a4 <__aeabi_ddiv>
 8000f9e:	4602      	mov	r2, r0
 8000fa0:	460b      	mov	r3, r1
 8000fa2:	4610      	mov	r0, r2
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	f7ff fce5 	bl	8000974 <__aeabi_d2iz>
 8000faa:	4603      	mov	r3, r0
 8000fac:	4a34      	ldr	r2, [pc, #208]	; (8001080 <send_voltage+0x158>)
 8000fae:	6013      	str	r3, [r2, #0]
	voltage_digit0 = (int)((voltage - voltage_digit2 - 0.1 *  voltage_digit1) / 0.01);   //сотая часть
 8000fb0:	4b31      	ldr	r3, [pc, #196]	; (8001078 <send_voltage+0x150>)
 8000fb2:	e9d3 4500 	ldrd	r4, r5, [r3]
 8000fb6:	4b31      	ldr	r3, [pc, #196]	; (800107c <send_voltage+0x154>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f7ff fa5e 	bl	800047c <__aeabi_i2d>
 8000fc0:	4602      	mov	r2, r0
 8000fc2:	460b      	mov	r3, r1
 8000fc4:	4620      	mov	r0, r4
 8000fc6:	4629      	mov	r1, r5
 8000fc8:	f7ff f90a 	bl	80001e0 <__aeabi_dsub>
 8000fcc:	4602      	mov	r2, r0
 8000fce:	460b      	mov	r3, r1
 8000fd0:	4614      	mov	r4, r2
 8000fd2:	461d      	mov	r5, r3
 8000fd4:	4b2a      	ldr	r3, [pc, #168]	; (8001080 <send_voltage+0x158>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f7ff fa4f 	bl	800047c <__aeabi_i2d>
 8000fde:	a320      	add	r3, pc, #128	; (adr r3, 8001060 <send_voltage+0x138>)
 8000fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fe4:	f7ff fab4 	bl	8000550 <__aeabi_dmul>
 8000fe8:	4602      	mov	r2, r0
 8000fea:	460b      	mov	r3, r1
 8000fec:	4620      	mov	r0, r4
 8000fee:	4629      	mov	r1, r5
 8000ff0:	f7ff f8f6 	bl	80001e0 <__aeabi_dsub>
 8000ff4:	4602      	mov	r2, r0
 8000ff6:	460b      	mov	r3, r1
 8000ff8:	4610      	mov	r0, r2
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	a31a      	add	r3, pc, #104	; (adr r3, 8001068 <send_voltage+0x140>)
 8000ffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001002:	f7ff fbcf 	bl	80007a4 <__aeabi_ddiv>
 8001006:	4602      	mov	r2, r0
 8001008:	460b      	mov	r3, r1
 800100a:	4610      	mov	r0, r2
 800100c:	4619      	mov	r1, r3
 800100e:	f7ff fcb1 	bl	8000974 <__aeabi_d2iz>
 8001012:	4603      	mov	r3, r0
 8001014:	4a1b      	ldr	r2, [pc, #108]	; (8001084 <send_voltage+0x15c>)
 8001016:	6013      	str	r3, [r2, #0]
	send_ascii_code(voltage_digit2 + 48);
 8001018:	4b18      	ldr	r3, [pc, #96]	; (800107c <send_voltage+0x154>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	b2db      	uxtb	r3, r3
 800101e:	3330      	adds	r3, #48	; 0x30
 8001020:	b2db      	uxtb	r3, r3
 8001022:	4618      	mov	r0, r3
 8001024:	f7ff ff4a 	bl	8000ebc <send_ascii_code>
	send_ascii_code(46);                   //точка
 8001028:	202e      	movs	r0, #46	; 0x2e
 800102a:	f7ff ff47 	bl	8000ebc <send_ascii_code>
    send_ascii_code(voltage_digit1 + 48);
 800102e:	4b14      	ldr	r3, [pc, #80]	; (8001080 <send_voltage+0x158>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	b2db      	uxtb	r3, r3
 8001034:	3330      	adds	r3, #48	; 0x30
 8001036:	b2db      	uxtb	r3, r3
 8001038:	4618      	mov	r0, r3
 800103a:	f7ff ff3f 	bl	8000ebc <send_ascii_code>
	send_ascii_code(voltage_digit0 + 48);
 800103e:	4b11      	ldr	r3, [pc, #68]	; (8001084 <send_voltage+0x15c>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	b2db      	uxtb	r3, r3
 8001044:	3330      	adds	r3, #48	; 0x30
 8001046:	b2db      	uxtb	r3, r3
 8001048:	4618      	mov	r0, r3
 800104a:	f7ff ff37 	bl	8000ebc <send_ascii_code>
}
 800104e:	bf00      	nop
 8001050:	bdb0      	pop	{r4, r5, r7, pc}
 8001052:	bf00      	nop
 8001054:	f3af 8000 	nop.w
 8001058:	66666666 	.word	0x66666666
 800105c:	400a6666 	.word	0x400a6666
 8001060:	9999999a 	.word	0x9999999a
 8001064:	3fb99999 	.word	0x3fb99999
 8001068:	47ae147b 	.word	0x47ae147b
 800106c:	3f847ae1 	.word	0x3f847ae1
 8001070:	2000002c 	.word	0x2000002c
 8001074:	40b00000 	.word	0x40b00000
 8001078:	20000040 	.word	0x20000040
 800107c:	20000030 	.word	0x20000030
 8001080:	20000034 	.word	0x20000034
 8001084:	20000038 	.word	0x20000038

08001088 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800108c:	b672      	cpsid	i
}
 800108e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001090:	e7fe      	b.n	8001090 <Error_Handler+0x8>
	...

08001094 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001094:	b480      	push	{r7}
 8001096:	b083      	sub	sp, #12
 8001098:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800109a:	2300      	movs	r3, #0
 800109c:	607b      	str	r3, [r7, #4]
 800109e:	4b10      	ldr	r3, [pc, #64]	; (80010e0 <HAL_MspInit+0x4c>)
 80010a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010a2:	4a0f      	ldr	r2, [pc, #60]	; (80010e0 <HAL_MspInit+0x4c>)
 80010a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010a8:	6453      	str	r3, [r2, #68]	; 0x44
 80010aa:	4b0d      	ldr	r3, [pc, #52]	; (80010e0 <HAL_MspInit+0x4c>)
 80010ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010b2:	607b      	str	r3, [r7, #4]
 80010b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010b6:	2300      	movs	r3, #0
 80010b8:	603b      	str	r3, [r7, #0]
 80010ba:	4b09      	ldr	r3, [pc, #36]	; (80010e0 <HAL_MspInit+0x4c>)
 80010bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010be:	4a08      	ldr	r2, [pc, #32]	; (80010e0 <HAL_MspInit+0x4c>)
 80010c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010c4:	6413      	str	r3, [r2, #64]	; 0x40
 80010c6:	4b06      	ldr	r3, [pc, #24]	; (80010e0 <HAL_MspInit+0x4c>)
 80010c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010ce:	603b      	str	r3, [r7, #0]
 80010d0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010d2:	bf00      	nop
 80010d4:	370c      	adds	r7, #12
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr
 80010de:	bf00      	nop
 80010e0:	40023800 	.word	0x40023800

080010e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010e8:	e7fe      	b.n	80010e8 <NMI_Handler+0x4>

080010ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010ea:	b480      	push	{r7}
 80010ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010ee:	e7fe      	b.n	80010ee <HardFault_Handler+0x4>

080010f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010f4:	e7fe      	b.n	80010f4 <MemManage_Handler+0x4>

080010f6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010f6:	b480      	push	{r7}
 80010f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010fa:	e7fe      	b.n	80010fa <BusFault_Handler+0x4>

080010fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001100:	e7fe      	b.n	8001100 <UsageFault_Handler+0x4>

08001102 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001102:	b480      	push	{r7}
 8001104:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001106:	bf00      	nop
 8001108:	46bd      	mov	sp, r7
 800110a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110e:	4770      	bx	lr

08001110 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001114:	bf00      	nop
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr

0800111e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800111e:	b480      	push	{r7}
 8001120:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001122:	bf00      	nop
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr

0800112c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001130:	f000 f8c0 	bl	80012b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001134:	bf00      	nop
 8001136:	bd80      	pop	{r7, pc}

08001138 <EXTI0_IRQHandler>:
/* For the available peripheral interrupt handler names,                      */
/* please refer to the startup file (startup_stm32f4xx.s).                    */
/******************************************************************************/

/* USER CODE BEGIN 1 */
void EXTI0_IRQHandler(void) {
 8001138:	b580      	push	{r7, lr}
 800113a:	b082      	sub	sp, #8
 800113c:	af00      	add	r7, sp, #0
  send_ascii_code(0xA); //line feed
 800113e:	200a      	movs	r0, #10
 8001140:	f7ff febc 	bl	8000ebc <send_ascii_code>
  send_ascii_code(66);  //B
 8001144:	2042      	movs	r0, #66	; 0x42
 8001146:	f7ff feb9 	bl	8000ebc <send_ascii_code>
  send_ascii_code(85);  //U
 800114a:	2055      	movs	r0, #85	; 0x55
 800114c:	f7ff feb6 	bl	8000ebc <send_ascii_code>
  send_ascii_code(84);  //T
 8001150:	2054      	movs	r0, #84	; 0x54
 8001152:	f7ff feb3 	bl	8000ebc <send_ascii_code>
  send_ascii_code(84);  //T
 8001156:	2054      	movs	r0, #84	; 0x54
 8001158:	f7ff feb0 	bl	8000ebc <send_ascii_code>
  send_ascii_code(79);  //O
 800115c:	204f      	movs	r0, #79	; 0x4f
 800115e:	f7ff fead 	bl	8000ebc <send_ascii_code>
  send_ascii_code(78);  //N
 8001162:	204e      	movs	r0, #78	; 0x4e
 8001164:	f7ff feaa 	bl	8000ebc <send_ascii_code>
  send_ascii_code(0xA); //line feed
 8001168:	200a      	movs	r0, #10
 800116a:	f7ff fea7 	bl	8000ebc <send_ascii_code>
  for (int i = 0; i < 250000; i++);
 800116e:	2300      	movs	r3, #0
 8001170:	607b      	str	r3, [r7, #4]
 8001172:	e002      	b.n	800117a <EXTI0_IRQHandler+0x42>
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	3301      	adds	r3, #1
 8001178:	607b      	str	r3, [r7, #4]
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	4a04      	ldr	r2, [pc, #16]	; (8001190 <EXTI0_IRQHandler+0x58>)
 800117e:	4293      	cmp	r3, r2
 8001180:	ddf8      	ble.n	8001174 <EXTI0_IRQHandler+0x3c>
  EXTI->PR = (1 << EXTI_PR_PR0_Pos);
 8001182:	4b04      	ldr	r3, [pc, #16]	; (8001194 <EXTI0_IRQHandler+0x5c>)
 8001184:	2201      	movs	r2, #1
 8001186:	615a      	str	r2, [r3, #20]
}
 8001188:	bf00      	nop
 800118a:	3708      	adds	r7, #8
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	0003d08f 	.word	0x0003d08f
 8001194:	40013c00 	.word	0x40013c00

08001198 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800119c:	4b06      	ldr	r3, [pc, #24]	; (80011b8 <SystemInit+0x20>)
 800119e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011a2:	4a05      	ldr	r2, [pc, #20]	; (80011b8 <SystemInit+0x20>)
 80011a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011ac:	bf00      	nop
 80011ae:	46bd      	mov	sp, r7
 80011b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b4:	4770      	bx	lr
 80011b6:	bf00      	nop
 80011b8:	e000ed00 	.word	0xe000ed00

080011bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80011bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011f4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80011c0:	480d      	ldr	r0, [pc, #52]	; (80011f8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80011c2:	490e      	ldr	r1, [pc, #56]	; (80011fc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80011c4:	4a0e      	ldr	r2, [pc, #56]	; (8001200 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80011c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011c8:	e002      	b.n	80011d0 <LoopCopyDataInit>

080011ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011ce:	3304      	adds	r3, #4

080011d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011d4:	d3f9      	bcc.n	80011ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011d6:	4a0b      	ldr	r2, [pc, #44]	; (8001204 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80011d8:	4c0b      	ldr	r4, [pc, #44]	; (8001208 <LoopFillZerobss+0x26>)
  movs r3, #0
 80011da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011dc:	e001      	b.n	80011e2 <LoopFillZerobss>

080011de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011e0:	3204      	adds	r2, #4

080011e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011e4:	d3fb      	bcc.n	80011de <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80011e6:	f7ff ffd7 	bl	8001198 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011ea:	f000 fd8d 	bl	8001d08 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011ee:	f7ff fd6b 	bl	8000cc8 <main>
  bx  lr    
 80011f2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80011f4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80011f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011fc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001200:	08001d98 	.word	0x08001d98
  ldr r2, =_sbss
 8001204:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001208:	2000004c 	.word	0x2000004c

0800120c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800120c:	e7fe      	b.n	800120c <ADC_IRQHandler>
	...

08001210 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001214:	4b0e      	ldr	r3, [pc, #56]	; (8001250 <HAL_Init+0x40>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4a0d      	ldr	r2, [pc, #52]	; (8001250 <HAL_Init+0x40>)
 800121a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800121e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001220:	4b0b      	ldr	r3, [pc, #44]	; (8001250 <HAL_Init+0x40>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4a0a      	ldr	r2, [pc, #40]	; (8001250 <HAL_Init+0x40>)
 8001226:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800122a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800122c:	4b08      	ldr	r3, [pc, #32]	; (8001250 <HAL_Init+0x40>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4a07      	ldr	r2, [pc, #28]	; (8001250 <HAL_Init+0x40>)
 8001232:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001236:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001238:	2003      	movs	r0, #3
 800123a:	f000 f90d 	bl	8001458 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800123e:	200f      	movs	r0, #15
 8001240:	f000 f808 	bl	8001254 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001244:	f7ff ff26 	bl	8001094 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001248:	2300      	movs	r3, #0
}
 800124a:	4618      	mov	r0, r3
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	40023c00 	.word	0x40023c00

08001254 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b082      	sub	sp, #8
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800125c:	4b12      	ldr	r3, [pc, #72]	; (80012a8 <HAL_InitTick+0x54>)
 800125e:	681a      	ldr	r2, [r3, #0]
 8001260:	4b12      	ldr	r3, [pc, #72]	; (80012ac <HAL_InitTick+0x58>)
 8001262:	781b      	ldrb	r3, [r3, #0]
 8001264:	4619      	mov	r1, r3
 8001266:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800126a:	fbb3 f3f1 	udiv	r3, r3, r1
 800126e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001272:	4618      	mov	r0, r3
 8001274:	f000 f917 	bl	80014a6 <HAL_SYSTICK_Config>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	d001      	beq.n	8001282 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800127e:	2301      	movs	r3, #1
 8001280:	e00e      	b.n	80012a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	2b0f      	cmp	r3, #15
 8001286:	d80a      	bhi.n	800129e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001288:	2200      	movs	r2, #0
 800128a:	6879      	ldr	r1, [r7, #4]
 800128c:	f04f 30ff 	mov.w	r0, #4294967295
 8001290:	f000 f8ed 	bl	800146e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001294:	4a06      	ldr	r2, [pc, #24]	; (80012b0 <HAL_InitTick+0x5c>)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800129a:	2300      	movs	r3, #0
 800129c:	e000      	b.n	80012a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800129e:	2301      	movs	r3, #1
}
 80012a0:	4618      	mov	r0, r3
 80012a2:	3708      	adds	r7, #8
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	20000000 	.word	0x20000000
 80012ac:	20000008 	.word	0x20000008
 80012b0:	20000004 	.word	0x20000004

080012b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012b8:	4b06      	ldr	r3, [pc, #24]	; (80012d4 <HAL_IncTick+0x20>)
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	461a      	mov	r2, r3
 80012be:	4b06      	ldr	r3, [pc, #24]	; (80012d8 <HAL_IncTick+0x24>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	4413      	add	r3, r2
 80012c4:	4a04      	ldr	r2, [pc, #16]	; (80012d8 <HAL_IncTick+0x24>)
 80012c6:	6013      	str	r3, [r2, #0]
}
 80012c8:	bf00      	nop
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr
 80012d2:	bf00      	nop
 80012d4:	20000008 	.word	0x20000008
 80012d8:	20000048 	.word	0x20000048

080012dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012dc:	b480      	push	{r7}
 80012de:	af00      	add	r7, sp, #0
  return uwTick;
 80012e0:	4b03      	ldr	r3, [pc, #12]	; (80012f0 <HAL_GetTick+0x14>)
 80012e2:	681b      	ldr	r3, [r3, #0]
}
 80012e4:	4618      	mov	r0, r3
 80012e6:	46bd      	mov	sp, r7
 80012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ec:	4770      	bx	lr
 80012ee:	bf00      	nop
 80012f0:	20000048 	.word	0x20000048

080012f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b085      	sub	sp, #20
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	f003 0307 	and.w	r3, r3, #7
 8001302:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001304:	4b0c      	ldr	r3, [pc, #48]	; (8001338 <__NVIC_SetPriorityGrouping+0x44>)
 8001306:	68db      	ldr	r3, [r3, #12]
 8001308:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800130a:	68ba      	ldr	r2, [r7, #8]
 800130c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001310:	4013      	ands	r3, r2
 8001312:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001318:	68bb      	ldr	r3, [r7, #8]
 800131a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800131c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001320:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001324:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001326:	4a04      	ldr	r2, [pc, #16]	; (8001338 <__NVIC_SetPriorityGrouping+0x44>)
 8001328:	68bb      	ldr	r3, [r7, #8]
 800132a:	60d3      	str	r3, [r2, #12]
}
 800132c:	bf00      	nop
 800132e:	3714      	adds	r7, #20
 8001330:	46bd      	mov	sp, r7
 8001332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001336:	4770      	bx	lr
 8001338:	e000ed00 	.word	0xe000ed00

0800133c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001340:	4b04      	ldr	r3, [pc, #16]	; (8001354 <__NVIC_GetPriorityGrouping+0x18>)
 8001342:	68db      	ldr	r3, [r3, #12]
 8001344:	0a1b      	lsrs	r3, r3, #8
 8001346:	f003 0307 	and.w	r3, r3, #7
}
 800134a:	4618      	mov	r0, r3
 800134c:	46bd      	mov	sp, r7
 800134e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001352:	4770      	bx	lr
 8001354:	e000ed00 	.word	0xe000ed00

08001358 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001358:	b480      	push	{r7}
 800135a:	b083      	sub	sp, #12
 800135c:	af00      	add	r7, sp, #0
 800135e:	4603      	mov	r3, r0
 8001360:	6039      	str	r1, [r7, #0]
 8001362:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001364:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001368:	2b00      	cmp	r3, #0
 800136a:	db0a      	blt.n	8001382 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	b2da      	uxtb	r2, r3
 8001370:	490c      	ldr	r1, [pc, #48]	; (80013a4 <__NVIC_SetPriority+0x4c>)
 8001372:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001376:	0112      	lsls	r2, r2, #4
 8001378:	b2d2      	uxtb	r2, r2
 800137a:	440b      	add	r3, r1
 800137c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001380:	e00a      	b.n	8001398 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	b2da      	uxtb	r2, r3
 8001386:	4908      	ldr	r1, [pc, #32]	; (80013a8 <__NVIC_SetPriority+0x50>)
 8001388:	79fb      	ldrb	r3, [r7, #7]
 800138a:	f003 030f 	and.w	r3, r3, #15
 800138e:	3b04      	subs	r3, #4
 8001390:	0112      	lsls	r2, r2, #4
 8001392:	b2d2      	uxtb	r2, r2
 8001394:	440b      	add	r3, r1
 8001396:	761a      	strb	r2, [r3, #24]
}
 8001398:	bf00      	nop
 800139a:	370c      	adds	r7, #12
 800139c:	46bd      	mov	sp, r7
 800139e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a2:	4770      	bx	lr
 80013a4:	e000e100 	.word	0xe000e100
 80013a8:	e000ed00 	.word	0xe000ed00

080013ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b089      	sub	sp, #36	; 0x24
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	60f8      	str	r0, [r7, #12]
 80013b4:	60b9      	str	r1, [r7, #8]
 80013b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	f003 0307 	and.w	r3, r3, #7
 80013be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013c0:	69fb      	ldr	r3, [r7, #28]
 80013c2:	f1c3 0307 	rsb	r3, r3, #7
 80013c6:	2b04      	cmp	r3, #4
 80013c8:	bf28      	it	cs
 80013ca:	2304      	movcs	r3, #4
 80013cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013ce:	69fb      	ldr	r3, [r7, #28]
 80013d0:	3304      	adds	r3, #4
 80013d2:	2b06      	cmp	r3, #6
 80013d4:	d902      	bls.n	80013dc <NVIC_EncodePriority+0x30>
 80013d6:	69fb      	ldr	r3, [r7, #28]
 80013d8:	3b03      	subs	r3, #3
 80013da:	e000      	b.n	80013de <NVIC_EncodePriority+0x32>
 80013dc:	2300      	movs	r3, #0
 80013de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013e0:	f04f 32ff 	mov.w	r2, #4294967295
 80013e4:	69bb      	ldr	r3, [r7, #24]
 80013e6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ea:	43da      	mvns	r2, r3
 80013ec:	68bb      	ldr	r3, [r7, #8]
 80013ee:	401a      	ands	r2, r3
 80013f0:	697b      	ldr	r3, [r7, #20]
 80013f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013f4:	f04f 31ff 	mov.w	r1, #4294967295
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	fa01 f303 	lsl.w	r3, r1, r3
 80013fe:	43d9      	mvns	r1, r3
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001404:	4313      	orrs	r3, r2
         );
}
 8001406:	4618      	mov	r0, r3
 8001408:	3724      	adds	r7, #36	; 0x24
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr
	...

08001414 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b082      	sub	sp, #8
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	3b01      	subs	r3, #1
 8001420:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001424:	d301      	bcc.n	800142a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001426:	2301      	movs	r3, #1
 8001428:	e00f      	b.n	800144a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800142a:	4a0a      	ldr	r2, [pc, #40]	; (8001454 <SysTick_Config+0x40>)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	3b01      	subs	r3, #1
 8001430:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001432:	210f      	movs	r1, #15
 8001434:	f04f 30ff 	mov.w	r0, #4294967295
 8001438:	f7ff ff8e 	bl	8001358 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800143c:	4b05      	ldr	r3, [pc, #20]	; (8001454 <SysTick_Config+0x40>)
 800143e:	2200      	movs	r2, #0
 8001440:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001442:	4b04      	ldr	r3, [pc, #16]	; (8001454 <SysTick_Config+0x40>)
 8001444:	2207      	movs	r2, #7
 8001446:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001448:	2300      	movs	r3, #0
}
 800144a:	4618      	mov	r0, r3
 800144c:	3708      	adds	r7, #8
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	e000e010 	.word	0xe000e010

08001458 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b082      	sub	sp, #8
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001460:	6878      	ldr	r0, [r7, #4]
 8001462:	f7ff ff47 	bl	80012f4 <__NVIC_SetPriorityGrouping>
}
 8001466:	bf00      	nop
 8001468:	3708      	adds	r7, #8
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}

0800146e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800146e:	b580      	push	{r7, lr}
 8001470:	b086      	sub	sp, #24
 8001472:	af00      	add	r7, sp, #0
 8001474:	4603      	mov	r3, r0
 8001476:	60b9      	str	r1, [r7, #8]
 8001478:	607a      	str	r2, [r7, #4]
 800147a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800147c:	2300      	movs	r3, #0
 800147e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001480:	f7ff ff5c 	bl	800133c <__NVIC_GetPriorityGrouping>
 8001484:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001486:	687a      	ldr	r2, [r7, #4]
 8001488:	68b9      	ldr	r1, [r7, #8]
 800148a:	6978      	ldr	r0, [r7, #20]
 800148c:	f7ff ff8e 	bl	80013ac <NVIC_EncodePriority>
 8001490:	4602      	mov	r2, r0
 8001492:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001496:	4611      	mov	r1, r2
 8001498:	4618      	mov	r0, r3
 800149a:	f7ff ff5d 	bl	8001358 <__NVIC_SetPriority>
}
 800149e:	bf00      	nop
 80014a0:	3718      	adds	r7, #24
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}

080014a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014a6:	b580      	push	{r7, lr}
 80014a8:	b082      	sub	sp, #8
 80014aa:	af00      	add	r7, sp, #0
 80014ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014ae:	6878      	ldr	r0, [r7, #4]
 80014b0:	f7ff ffb0 	bl	8001414 <SysTick_Config>
 80014b4:	4603      	mov	r3, r0
}
 80014b6:	4618      	mov	r0, r3
 80014b8:	3708      	adds	r7, #8
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
	...

080014c0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b086      	sub	sp, #24
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d101      	bne.n	80014d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80014ce:	2301      	movs	r3, #1
 80014d0:	e267      	b.n	80019a2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f003 0301 	and.w	r3, r3, #1
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d075      	beq.n	80015ca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80014de:	4b88      	ldr	r3, [pc, #544]	; (8001700 <HAL_RCC_OscConfig+0x240>)
 80014e0:	689b      	ldr	r3, [r3, #8]
 80014e2:	f003 030c 	and.w	r3, r3, #12
 80014e6:	2b04      	cmp	r3, #4
 80014e8:	d00c      	beq.n	8001504 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80014ea:	4b85      	ldr	r3, [pc, #532]	; (8001700 <HAL_RCC_OscConfig+0x240>)
 80014ec:	689b      	ldr	r3, [r3, #8]
 80014ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80014f2:	2b08      	cmp	r3, #8
 80014f4:	d112      	bne.n	800151c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80014f6:	4b82      	ldr	r3, [pc, #520]	; (8001700 <HAL_RCC_OscConfig+0x240>)
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001502:	d10b      	bne.n	800151c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001504:	4b7e      	ldr	r3, [pc, #504]	; (8001700 <HAL_RCC_OscConfig+0x240>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800150c:	2b00      	cmp	r3, #0
 800150e:	d05b      	beq.n	80015c8 <HAL_RCC_OscConfig+0x108>
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d157      	bne.n	80015c8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001518:	2301      	movs	r3, #1
 800151a:	e242      	b.n	80019a2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001524:	d106      	bne.n	8001534 <HAL_RCC_OscConfig+0x74>
 8001526:	4b76      	ldr	r3, [pc, #472]	; (8001700 <HAL_RCC_OscConfig+0x240>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	4a75      	ldr	r2, [pc, #468]	; (8001700 <HAL_RCC_OscConfig+0x240>)
 800152c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001530:	6013      	str	r3, [r2, #0]
 8001532:	e01d      	b.n	8001570 <HAL_RCC_OscConfig+0xb0>
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800153c:	d10c      	bne.n	8001558 <HAL_RCC_OscConfig+0x98>
 800153e:	4b70      	ldr	r3, [pc, #448]	; (8001700 <HAL_RCC_OscConfig+0x240>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4a6f      	ldr	r2, [pc, #444]	; (8001700 <HAL_RCC_OscConfig+0x240>)
 8001544:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001548:	6013      	str	r3, [r2, #0]
 800154a:	4b6d      	ldr	r3, [pc, #436]	; (8001700 <HAL_RCC_OscConfig+0x240>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	4a6c      	ldr	r2, [pc, #432]	; (8001700 <HAL_RCC_OscConfig+0x240>)
 8001550:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001554:	6013      	str	r3, [r2, #0]
 8001556:	e00b      	b.n	8001570 <HAL_RCC_OscConfig+0xb0>
 8001558:	4b69      	ldr	r3, [pc, #420]	; (8001700 <HAL_RCC_OscConfig+0x240>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a68      	ldr	r2, [pc, #416]	; (8001700 <HAL_RCC_OscConfig+0x240>)
 800155e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001562:	6013      	str	r3, [r2, #0]
 8001564:	4b66      	ldr	r3, [pc, #408]	; (8001700 <HAL_RCC_OscConfig+0x240>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a65      	ldr	r2, [pc, #404]	; (8001700 <HAL_RCC_OscConfig+0x240>)
 800156a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800156e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d013      	beq.n	80015a0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001578:	f7ff feb0 	bl	80012dc <HAL_GetTick>
 800157c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800157e:	e008      	b.n	8001592 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001580:	f7ff feac 	bl	80012dc <HAL_GetTick>
 8001584:	4602      	mov	r2, r0
 8001586:	693b      	ldr	r3, [r7, #16]
 8001588:	1ad3      	subs	r3, r2, r3
 800158a:	2b64      	cmp	r3, #100	; 0x64
 800158c:	d901      	bls.n	8001592 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800158e:	2303      	movs	r3, #3
 8001590:	e207      	b.n	80019a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001592:	4b5b      	ldr	r3, [pc, #364]	; (8001700 <HAL_RCC_OscConfig+0x240>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800159a:	2b00      	cmp	r3, #0
 800159c:	d0f0      	beq.n	8001580 <HAL_RCC_OscConfig+0xc0>
 800159e:	e014      	b.n	80015ca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015a0:	f7ff fe9c 	bl	80012dc <HAL_GetTick>
 80015a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015a6:	e008      	b.n	80015ba <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015a8:	f7ff fe98 	bl	80012dc <HAL_GetTick>
 80015ac:	4602      	mov	r2, r0
 80015ae:	693b      	ldr	r3, [r7, #16]
 80015b0:	1ad3      	subs	r3, r2, r3
 80015b2:	2b64      	cmp	r3, #100	; 0x64
 80015b4:	d901      	bls.n	80015ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80015b6:	2303      	movs	r3, #3
 80015b8:	e1f3      	b.n	80019a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015ba:	4b51      	ldr	r3, [pc, #324]	; (8001700 <HAL_RCC_OscConfig+0x240>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d1f0      	bne.n	80015a8 <HAL_RCC_OscConfig+0xe8>
 80015c6:	e000      	b.n	80015ca <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f003 0302 	and.w	r3, r3, #2
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d063      	beq.n	800169e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80015d6:	4b4a      	ldr	r3, [pc, #296]	; (8001700 <HAL_RCC_OscConfig+0x240>)
 80015d8:	689b      	ldr	r3, [r3, #8]
 80015da:	f003 030c 	and.w	r3, r3, #12
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d00b      	beq.n	80015fa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80015e2:	4b47      	ldr	r3, [pc, #284]	; (8001700 <HAL_RCC_OscConfig+0x240>)
 80015e4:	689b      	ldr	r3, [r3, #8]
 80015e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80015ea:	2b08      	cmp	r3, #8
 80015ec:	d11c      	bne.n	8001628 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80015ee:	4b44      	ldr	r3, [pc, #272]	; (8001700 <HAL_RCC_OscConfig+0x240>)
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d116      	bne.n	8001628 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015fa:	4b41      	ldr	r3, [pc, #260]	; (8001700 <HAL_RCC_OscConfig+0x240>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f003 0302 	and.w	r3, r3, #2
 8001602:	2b00      	cmp	r3, #0
 8001604:	d005      	beq.n	8001612 <HAL_RCC_OscConfig+0x152>
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	68db      	ldr	r3, [r3, #12]
 800160a:	2b01      	cmp	r3, #1
 800160c:	d001      	beq.n	8001612 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800160e:	2301      	movs	r3, #1
 8001610:	e1c7      	b.n	80019a2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001612:	4b3b      	ldr	r3, [pc, #236]	; (8001700 <HAL_RCC_OscConfig+0x240>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	691b      	ldr	r3, [r3, #16]
 800161e:	00db      	lsls	r3, r3, #3
 8001620:	4937      	ldr	r1, [pc, #220]	; (8001700 <HAL_RCC_OscConfig+0x240>)
 8001622:	4313      	orrs	r3, r2
 8001624:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001626:	e03a      	b.n	800169e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	68db      	ldr	r3, [r3, #12]
 800162c:	2b00      	cmp	r3, #0
 800162e:	d020      	beq.n	8001672 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001630:	4b34      	ldr	r3, [pc, #208]	; (8001704 <HAL_RCC_OscConfig+0x244>)
 8001632:	2201      	movs	r2, #1
 8001634:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001636:	f7ff fe51 	bl	80012dc <HAL_GetTick>
 800163a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800163c:	e008      	b.n	8001650 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800163e:	f7ff fe4d 	bl	80012dc <HAL_GetTick>
 8001642:	4602      	mov	r2, r0
 8001644:	693b      	ldr	r3, [r7, #16]
 8001646:	1ad3      	subs	r3, r2, r3
 8001648:	2b02      	cmp	r3, #2
 800164a:	d901      	bls.n	8001650 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800164c:	2303      	movs	r3, #3
 800164e:	e1a8      	b.n	80019a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001650:	4b2b      	ldr	r3, [pc, #172]	; (8001700 <HAL_RCC_OscConfig+0x240>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f003 0302 	and.w	r3, r3, #2
 8001658:	2b00      	cmp	r3, #0
 800165a:	d0f0      	beq.n	800163e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800165c:	4b28      	ldr	r3, [pc, #160]	; (8001700 <HAL_RCC_OscConfig+0x240>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	691b      	ldr	r3, [r3, #16]
 8001668:	00db      	lsls	r3, r3, #3
 800166a:	4925      	ldr	r1, [pc, #148]	; (8001700 <HAL_RCC_OscConfig+0x240>)
 800166c:	4313      	orrs	r3, r2
 800166e:	600b      	str	r3, [r1, #0]
 8001670:	e015      	b.n	800169e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001672:	4b24      	ldr	r3, [pc, #144]	; (8001704 <HAL_RCC_OscConfig+0x244>)
 8001674:	2200      	movs	r2, #0
 8001676:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001678:	f7ff fe30 	bl	80012dc <HAL_GetTick>
 800167c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800167e:	e008      	b.n	8001692 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001680:	f7ff fe2c 	bl	80012dc <HAL_GetTick>
 8001684:	4602      	mov	r2, r0
 8001686:	693b      	ldr	r3, [r7, #16]
 8001688:	1ad3      	subs	r3, r2, r3
 800168a:	2b02      	cmp	r3, #2
 800168c:	d901      	bls.n	8001692 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800168e:	2303      	movs	r3, #3
 8001690:	e187      	b.n	80019a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001692:	4b1b      	ldr	r3, [pc, #108]	; (8001700 <HAL_RCC_OscConfig+0x240>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f003 0302 	and.w	r3, r3, #2
 800169a:	2b00      	cmp	r3, #0
 800169c:	d1f0      	bne.n	8001680 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f003 0308 	and.w	r3, r3, #8
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d036      	beq.n	8001718 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	695b      	ldr	r3, [r3, #20]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d016      	beq.n	80016e0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016b2:	4b15      	ldr	r3, [pc, #84]	; (8001708 <HAL_RCC_OscConfig+0x248>)
 80016b4:	2201      	movs	r2, #1
 80016b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016b8:	f7ff fe10 	bl	80012dc <HAL_GetTick>
 80016bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016be:	e008      	b.n	80016d2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016c0:	f7ff fe0c 	bl	80012dc <HAL_GetTick>
 80016c4:	4602      	mov	r2, r0
 80016c6:	693b      	ldr	r3, [r7, #16]
 80016c8:	1ad3      	subs	r3, r2, r3
 80016ca:	2b02      	cmp	r3, #2
 80016cc:	d901      	bls.n	80016d2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80016ce:	2303      	movs	r3, #3
 80016d0:	e167      	b.n	80019a2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016d2:	4b0b      	ldr	r3, [pc, #44]	; (8001700 <HAL_RCC_OscConfig+0x240>)
 80016d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80016d6:	f003 0302 	and.w	r3, r3, #2
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d0f0      	beq.n	80016c0 <HAL_RCC_OscConfig+0x200>
 80016de:	e01b      	b.n	8001718 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016e0:	4b09      	ldr	r3, [pc, #36]	; (8001708 <HAL_RCC_OscConfig+0x248>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016e6:	f7ff fdf9 	bl	80012dc <HAL_GetTick>
 80016ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016ec:	e00e      	b.n	800170c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016ee:	f7ff fdf5 	bl	80012dc <HAL_GetTick>
 80016f2:	4602      	mov	r2, r0
 80016f4:	693b      	ldr	r3, [r7, #16]
 80016f6:	1ad3      	subs	r3, r2, r3
 80016f8:	2b02      	cmp	r3, #2
 80016fa:	d907      	bls.n	800170c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80016fc:	2303      	movs	r3, #3
 80016fe:	e150      	b.n	80019a2 <HAL_RCC_OscConfig+0x4e2>
 8001700:	40023800 	.word	0x40023800
 8001704:	42470000 	.word	0x42470000
 8001708:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800170c:	4b88      	ldr	r3, [pc, #544]	; (8001930 <HAL_RCC_OscConfig+0x470>)
 800170e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001710:	f003 0302 	and.w	r3, r3, #2
 8001714:	2b00      	cmp	r3, #0
 8001716:	d1ea      	bne.n	80016ee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f003 0304 	and.w	r3, r3, #4
 8001720:	2b00      	cmp	r3, #0
 8001722:	f000 8097 	beq.w	8001854 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001726:	2300      	movs	r3, #0
 8001728:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800172a:	4b81      	ldr	r3, [pc, #516]	; (8001930 <HAL_RCC_OscConfig+0x470>)
 800172c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800172e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001732:	2b00      	cmp	r3, #0
 8001734:	d10f      	bne.n	8001756 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001736:	2300      	movs	r3, #0
 8001738:	60bb      	str	r3, [r7, #8]
 800173a:	4b7d      	ldr	r3, [pc, #500]	; (8001930 <HAL_RCC_OscConfig+0x470>)
 800173c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800173e:	4a7c      	ldr	r2, [pc, #496]	; (8001930 <HAL_RCC_OscConfig+0x470>)
 8001740:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001744:	6413      	str	r3, [r2, #64]	; 0x40
 8001746:	4b7a      	ldr	r3, [pc, #488]	; (8001930 <HAL_RCC_OscConfig+0x470>)
 8001748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800174a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800174e:	60bb      	str	r3, [r7, #8]
 8001750:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001752:	2301      	movs	r3, #1
 8001754:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001756:	4b77      	ldr	r3, [pc, #476]	; (8001934 <HAL_RCC_OscConfig+0x474>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800175e:	2b00      	cmp	r3, #0
 8001760:	d118      	bne.n	8001794 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001762:	4b74      	ldr	r3, [pc, #464]	; (8001934 <HAL_RCC_OscConfig+0x474>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4a73      	ldr	r2, [pc, #460]	; (8001934 <HAL_RCC_OscConfig+0x474>)
 8001768:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800176c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800176e:	f7ff fdb5 	bl	80012dc <HAL_GetTick>
 8001772:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001774:	e008      	b.n	8001788 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001776:	f7ff fdb1 	bl	80012dc <HAL_GetTick>
 800177a:	4602      	mov	r2, r0
 800177c:	693b      	ldr	r3, [r7, #16]
 800177e:	1ad3      	subs	r3, r2, r3
 8001780:	2b02      	cmp	r3, #2
 8001782:	d901      	bls.n	8001788 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001784:	2303      	movs	r3, #3
 8001786:	e10c      	b.n	80019a2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001788:	4b6a      	ldr	r3, [pc, #424]	; (8001934 <HAL_RCC_OscConfig+0x474>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001790:	2b00      	cmp	r3, #0
 8001792:	d0f0      	beq.n	8001776 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	689b      	ldr	r3, [r3, #8]
 8001798:	2b01      	cmp	r3, #1
 800179a:	d106      	bne.n	80017aa <HAL_RCC_OscConfig+0x2ea>
 800179c:	4b64      	ldr	r3, [pc, #400]	; (8001930 <HAL_RCC_OscConfig+0x470>)
 800179e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017a0:	4a63      	ldr	r2, [pc, #396]	; (8001930 <HAL_RCC_OscConfig+0x470>)
 80017a2:	f043 0301 	orr.w	r3, r3, #1
 80017a6:	6713      	str	r3, [r2, #112]	; 0x70
 80017a8:	e01c      	b.n	80017e4 <HAL_RCC_OscConfig+0x324>
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	689b      	ldr	r3, [r3, #8]
 80017ae:	2b05      	cmp	r3, #5
 80017b0:	d10c      	bne.n	80017cc <HAL_RCC_OscConfig+0x30c>
 80017b2:	4b5f      	ldr	r3, [pc, #380]	; (8001930 <HAL_RCC_OscConfig+0x470>)
 80017b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017b6:	4a5e      	ldr	r2, [pc, #376]	; (8001930 <HAL_RCC_OscConfig+0x470>)
 80017b8:	f043 0304 	orr.w	r3, r3, #4
 80017bc:	6713      	str	r3, [r2, #112]	; 0x70
 80017be:	4b5c      	ldr	r3, [pc, #368]	; (8001930 <HAL_RCC_OscConfig+0x470>)
 80017c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017c2:	4a5b      	ldr	r2, [pc, #364]	; (8001930 <HAL_RCC_OscConfig+0x470>)
 80017c4:	f043 0301 	orr.w	r3, r3, #1
 80017c8:	6713      	str	r3, [r2, #112]	; 0x70
 80017ca:	e00b      	b.n	80017e4 <HAL_RCC_OscConfig+0x324>
 80017cc:	4b58      	ldr	r3, [pc, #352]	; (8001930 <HAL_RCC_OscConfig+0x470>)
 80017ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017d0:	4a57      	ldr	r2, [pc, #348]	; (8001930 <HAL_RCC_OscConfig+0x470>)
 80017d2:	f023 0301 	bic.w	r3, r3, #1
 80017d6:	6713      	str	r3, [r2, #112]	; 0x70
 80017d8:	4b55      	ldr	r3, [pc, #340]	; (8001930 <HAL_RCC_OscConfig+0x470>)
 80017da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017dc:	4a54      	ldr	r2, [pc, #336]	; (8001930 <HAL_RCC_OscConfig+0x470>)
 80017de:	f023 0304 	bic.w	r3, r3, #4
 80017e2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	689b      	ldr	r3, [r3, #8]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d015      	beq.n	8001818 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017ec:	f7ff fd76 	bl	80012dc <HAL_GetTick>
 80017f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017f2:	e00a      	b.n	800180a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017f4:	f7ff fd72 	bl	80012dc <HAL_GetTick>
 80017f8:	4602      	mov	r2, r0
 80017fa:	693b      	ldr	r3, [r7, #16]
 80017fc:	1ad3      	subs	r3, r2, r3
 80017fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001802:	4293      	cmp	r3, r2
 8001804:	d901      	bls.n	800180a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001806:	2303      	movs	r3, #3
 8001808:	e0cb      	b.n	80019a2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800180a:	4b49      	ldr	r3, [pc, #292]	; (8001930 <HAL_RCC_OscConfig+0x470>)
 800180c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800180e:	f003 0302 	and.w	r3, r3, #2
 8001812:	2b00      	cmp	r3, #0
 8001814:	d0ee      	beq.n	80017f4 <HAL_RCC_OscConfig+0x334>
 8001816:	e014      	b.n	8001842 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001818:	f7ff fd60 	bl	80012dc <HAL_GetTick>
 800181c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800181e:	e00a      	b.n	8001836 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001820:	f7ff fd5c 	bl	80012dc <HAL_GetTick>
 8001824:	4602      	mov	r2, r0
 8001826:	693b      	ldr	r3, [r7, #16]
 8001828:	1ad3      	subs	r3, r2, r3
 800182a:	f241 3288 	movw	r2, #5000	; 0x1388
 800182e:	4293      	cmp	r3, r2
 8001830:	d901      	bls.n	8001836 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001832:	2303      	movs	r3, #3
 8001834:	e0b5      	b.n	80019a2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001836:	4b3e      	ldr	r3, [pc, #248]	; (8001930 <HAL_RCC_OscConfig+0x470>)
 8001838:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800183a:	f003 0302 	and.w	r3, r3, #2
 800183e:	2b00      	cmp	r3, #0
 8001840:	d1ee      	bne.n	8001820 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001842:	7dfb      	ldrb	r3, [r7, #23]
 8001844:	2b01      	cmp	r3, #1
 8001846:	d105      	bne.n	8001854 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001848:	4b39      	ldr	r3, [pc, #228]	; (8001930 <HAL_RCC_OscConfig+0x470>)
 800184a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800184c:	4a38      	ldr	r2, [pc, #224]	; (8001930 <HAL_RCC_OscConfig+0x470>)
 800184e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001852:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	699b      	ldr	r3, [r3, #24]
 8001858:	2b00      	cmp	r3, #0
 800185a:	f000 80a1 	beq.w	80019a0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800185e:	4b34      	ldr	r3, [pc, #208]	; (8001930 <HAL_RCC_OscConfig+0x470>)
 8001860:	689b      	ldr	r3, [r3, #8]
 8001862:	f003 030c 	and.w	r3, r3, #12
 8001866:	2b08      	cmp	r3, #8
 8001868:	d05c      	beq.n	8001924 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	699b      	ldr	r3, [r3, #24]
 800186e:	2b02      	cmp	r3, #2
 8001870:	d141      	bne.n	80018f6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001872:	4b31      	ldr	r3, [pc, #196]	; (8001938 <HAL_RCC_OscConfig+0x478>)
 8001874:	2200      	movs	r2, #0
 8001876:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001878:	f7ff fd30 	bl	80012dc <HAL_GetTick>
 800187c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800187e:	e008      	b.n	8001892 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001880:	f7ff fd2c 	bl	80012dc <HAL_GetTick>
 8001884:	4602      	mov	r2, r0
 8001886:	693b      	ldr	r3, [r7, #16]
 8001888:	1ad3      	subs	r3, r2, r3
 800188a:	2b02      	cmp	r3, #2
 800188c:	d901      	bls.n	8001892 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800188e:	2303      	movs	r3, #3
 8001890:	e087      	b.n	80019a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001892:	4b27      	ldr	r3, [pc, #156]	; (8001930 <HAL_RCC_OscConfig+0x470>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800189a:	2b00      	cmp	r3, #0
 800189c:	d1f0      	bne.n	8001880 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	69da      	ldr	r2, [r3, #28]
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6a1b      	ldr	r3, [r3, #32]
 80018a6:	431a      	orrs	r2, r3
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ac:	019b      	lsls	r3, r3, #6
 80018ae:	431a      	orrs	r2, r3
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018b4:	085b      	lsrs	r3, r3, #1
 80018b6:	3b01      	subs	r3, #1
 80018b8:	041b      	lsls	r3, r3, #16
 80018ba:	431a      	orrs	r2, r3
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018c0:	061b      	lsls	r3, r3, #24
 80018c2:	491b      	ldr	r1, [pc, #108]	; (8001930 <HAL_RCC_OscConfig+0x470>)
 80018c4:	4313      	orrs	r3, r2
 80018c6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018c8:	4b1b      	ldr	r3, [pc, #108]	; (8001938 <HAL_RCC_OscConfig+0x478>)
 80018ca:	2201      	movs	r2, #1
 80018cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018ce:	f7ff fd05 	bl	80012dc <HAL_GetTick>
 80018d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018d4:	e008      	b.n	80018e8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018d6:	f7ff fd01 	bl	80012dc <HAL_GetTick>
 80018da:	4602      	mov	r2, r0
 80018dc:	693b      	ldr	r3, [r7, #16]
 80018de:	1ad3      	subs	r3, r2, r3
 80018e0:	2b02      	cmp	r3, #2
 80018e2:	d901      	bls.n	80018e8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80018e4:	2303      	movs	r3, #3
 80018e6:	e05c      	b.n	80019a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018e8:	4b11      	ldr	r3, [pc, #68]	; (8001930 <HAL_RCC_OscConfig+0x470>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d0f0      	beq.n	80018d6 <HAL_RCC_OscConfig+0x416>
 80018f4:	e054      	b.n	80019a0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018f6:	4b10      	ldr	r3, [pc, #64]	; (8001938 <HAL_RCC_OscConfig+0x478>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018fc:	f7ff fcee 	bl	80012dc <HAL_GetTick>
 8001900:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001902:	e008      	b.n	8001916 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001904:	f7ff fcea 	bl	80012dc <HAL_GetTick>
 8001908:	4602      	mov	r2, r0
 800190a:	693b      	ldr	r3, [r7, #16]
 800190c:	1ad3      	subs	r3, r2, r3
 800190e:	2b02      	cmp	r3, #2
 8001910:	d901      	bls.n	8001916 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001912:	2303      	movs	r3, #3
 8001914:	e045      	b.n	80019a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001916:	4b06      	ldr	r3, [pc, #24]	; (8001930 <HAL_RCC_OscConfig+0x470>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800191e:	2b00      	cmp	r3, #0
 8001920:	d1f0      	bne.n	8001904 <HAL_RCC_OscConfig+0x444>
 8001922:	e03d      	b.n	80019a0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	699b      	ldr	r3, [r3, #24]
 8001928:	2b01      	cmp	r3, #1
 800192a:	d107      	bne.n	800193c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800192c:	2301      	movs	r3, #1
 800192e:	e038      	b.n	80019a2 <HAL_RCC_OscConfig+0x4e2>
 8001930:	40023800 	.word	0x40023800
 8001934:	40007000 	.word	0x40007000
 8001938:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800193c:	4b1b      	ldr	r3, [pc, #108]	; (80019ac <HAL_RCC_OscConfig+0x4ec>)
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	699b      	ldr	r3, [r3, #24]
 8001946:	2b01      	cmp	r3, #1
 8001948:	d028      	beq.n	800199c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001954:	429a      	cmp	r2, r3
 8001956:	d121      	bne.n	800199c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001962:	429a      	cmp	r2, r3
 8001964:	d11a      	bne.n	800199c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001966:	68fa      	ldr	r2, [r7, #12]
 8001968:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800196c:	4013      	ands	r3, r2
 800196e:	687a      	ldr	r2, [r7, #4]
 8001970:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001972:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001974:	4293      	cmp	r3, r2
 8001976:	d111      	bne.n	800199c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001982:	085b      	lsrs	r3, r3, #1
 8001984:	3b01      	subs	r3, #1
 8001986:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001988:	429a      	cmp	r2, r3
 800198a:	d107      	bne.n	800199c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001996:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001998:	429a      	cmp	r2, r3
 800199a:	d001      	beq.n	80019a0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800199c:	2301      	movs	r3, #1
 800199e:	e000      	b.n	80019a2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80019a0:	2300      	movs	r3, #0
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	3718      	adds	r7, #24
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	40023800 	.word	0x40023800

080019b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b084      	sub	sp, #16
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
 80019b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d101      	bne.n	80019c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019c0:	2301      	movs	r3, #1
 80019c2:	e0cc      	b.n	8001b5e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80019c4:	4b68      	ldr	r3, [pc, #416]	; (8001b68 <HAL_RCC_ClockConfig+0x1b8>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f003 0307 	and.w	r3, r3, #7
 80019cc:	683a      	ldr	r2, [r7, #0]
 80019ce:	429a      	cmp	r2, r3
 80019d0:	d90c      	bls.n	80019ec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019d2:	4b65      	ldr	r3, [pc, #404]	; (8001b68 <HAL_RCC_ClockConfig+0x1b8>)
 80019d4:	683a      	ldr	r2, [r7, #0]
 80019d6:	b2d2      	uxtb	r2, r2
 80019d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019da:	4b63      	ldr	r3, [pc, #396]	; (8001b68 <HAL_RCC_ClockConfig+0x1b8>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f003 0307 	and.w	r3, r3, #7
 80019e2:	683a      	ldr	r2, [r7, #0]
 80019e4:	429a      	cmp	r2, r3
 80019e6:	d001      	beq.n	80019ec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80019e8:	2301      	movs	r3, #1
 80019ea:	e0b8      	b.n	8001b5e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f003 0302 	and.w	r3, r3, #2
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d020      	beq.n	8001a3a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f003 0304 	and.w	r3, r3, #4
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d005      	beq.n	8001a10 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a04:	4b59      	ldr	r3, [pc, #356]	; (8001b6c <HAL_RCC_ClockConfig+0x1bc>)
 8001a06:	689b      	ldr	r3, [r3, #8]
 8001a08:	4a58      	ldr	r2, [pc, #352]	; (8001b6c <HAL_RCC_ClockConfig+0x1bc>)
 8001a0a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001a0e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f003 0308 	and.w	r3, r3, #8
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d005      	beq.n	8001a28 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a1c:	4b53      	ldr	r3, [pc, #332]	; (8001b6c <HAL_RCC_ClockConfig+0x1bc>)
 8001a1e:	689b      	ldr	r3, [r3, #8]
 8001a20:	4a52      	ldr	r2, [pc, #328]	; (8001b6c <HAL_RCC_ClockConfig+0x1bc>)
 8001a22:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001a26:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a28:	4b50      	ldr	r3, [pc, #320]	; (8001b6c <HAL_RCC_ClockConfig+0x1bc>)
 8001a2a:	689b      	ldr	r3, [r3, #8]
 8001a2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	689b      	ldr	r3, [r3, #8]
 8001a34:	494d      	ldr	r1, [pc, #308]	; (8001b6c <HAL_RCC_ClockConfig+0x1bc>)
 8001a36:	4313      	orrs	r3, r2
 8001a38:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f003 0301 	and.w	r3, r3, #1
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d044      	beq.n	8001ad0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	2b01      	cmp	r3, #1
 8001a4c:	d107      	bne.n	8001a5e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a4e:	4b47      	ldr	r3, [pc, #284]	; (8001b6c <HAL_RCC_ClockConfig+0x1bc>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d119      	bne.n	8001a8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	e07f      	b.n	8001b5e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	2b02      	cmp	r3, #2
 8001a64:	d003      	beq.n	8001a6e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a6a:	2b03      	cmp	r3, #3
 8001a6c:	d107      	bne.n	8001a7e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a6e:	4b3f      	ldr	r3, [pc, #252]	; (8001b6c <HAL_RCC_ClockConfig+0x1bc>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d109      	bne.n	8001a8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	e06f      	b.n	8001b5e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a7e:	4b3b      	ldr	r3, [pc, #236]	; (8001b6c <HAL_RCC_ClockConfig+0x1bc>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f003 0302 	and.w	r3, r3, #2
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d101      	bne.n	8001a8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	e067      	b.n	8001b5e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a8e:	4b37      	ldr	r3, [pc, #220]	; (8001b6c <HAL_RCC_ClockConfig+0x1bc>)
 8001a90:	689b      	ldr	r3, [r3, #8]
 8001a92:	f023 0203 	bic.w	r2, r3, #3
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	4934      	ldr	r1, [pc, #208]	; (8001b6c <HAL_RCC_ClockConfig+0x1bc>)
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001aa0:	f7ff fc1c 	bl	80012dc <HAL_GetTick>
 8001aa4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001aa6:	e00a      	b.n	8001abe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001aa8:	f7ff fc18 	bl	80012dc <HAL_GetTick>
 8001aac:	4602      	mov	r2, r0
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	1ad3      	subs	r3, r2, r3
 8001ab2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d901      	bls.n	8001abe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001aba:	2303      	movs	r3, #3
 8001abc:	e04f      	b.n	8001b5e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001abe:	4b2b      	ldr	r3, [pc, #172]	; (8001b6c <HAL_RCC_ClockConfig+0x1bc>)
 8001ac0:	689b      	ldr	r3, [r3, #8]
 8001ac2:	f003 020c 	and.w	r2, r3, #12
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	009b      	lsls	r3, r3, #2
 8001acc:	429a      	cmp	r2, r3
 8001ace:	d1eb      	bne.n	8001aa8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ad0:	4b25      	ldr	r3, [pc, #148]	; (8001b68 <HAL_RCC_ClockConfig+0x1b8>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f003 0307 	and.w	r3, r3, #7
 8001ad8:	683a      	ldr	r2, [r7, #0]
 8001ada:	429a      	cmp	r2, r3
 8001adc:	d20c      	bcs.n	8001af8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ade:	4b22      	ldr	r3, [pc, #136]	; (8001b68 <HAL_RCC_ClockConfig+0x1b8>)
 8001ae0:	683a      	ldr	r2, [r7, #0]
 8001ae2:	b2d2      	uxtb	r2, r2
 8001ae4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ae6:	4b20      	ldr	r3, [pc, #128]	; (8001b68 <HAL_RCC_ClockConfig+0x1b8>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f003 0307 	and.w	r3, r3, #7
 8001aee:	683a      	ldr	r2, [r7, #0]
 8001af0:	429a      	cmp	r2, r3
 8001af2:	d001      	beq.n	8001af8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001af4:	2301      	movs	r3, #1
 8001af6:	e032      	b.n	8001b5e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f003 0304 	and.w	r3, r3, #4
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d008      	beq.n	8001b16 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b04:	4b19      	ldr	r3, [pc, #100]	; (8001b6c <HAL_RCC_ClockConfig+0x1bc>)
 8001b06:	689b      	ldr	r3, [r3, #8]
 8001b08:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	68db      	ldr	r3, [r3, #12]
 8001b10:	4916      	ldr	r1, [pc, #88]	; (8001b6c <HAL_RCC_ClockConfig+0x1bc>)
 8001b12:	4313      	orrs	r3, r2
 8001b14:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f003 0308 	and.w	r3, r3, #8
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d009      	beq.n	8001b36 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b22:	4b12      	ldr	r3, [pc, #72]	; (8001b6c <HAL_RCC_ClockConfig+0x1bc>)
 8001b24:	689b      	ldr	r3, [r3, #8]
 8001b26:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	691b      	ldr	r3, [r3, #16]
 8001b2e:	00db      	lsls	r3, r3, #3
 8001b30:	490e      	ldr	r1, [pc, #56]	; (8001b6c <HAL_RCC_ClockConfig+0x1bc>)
 8001b32:	4313      	orrs	r3, r2
 8001b34:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001b36:	f000 f821 	bl	8001b7c <HAL_RCC_GetSysClockFreq>
 8001b3a:	4602      	mov	r2, r0
 8001b3c:	4b0b      	ldr	r3, [pc, #44]	; (8001b6c <HAL_RCC_ClockConfig+0x1bc>)
 8001b3e:	689b      	ldr	r3, [r3, #8]
 8001b40:	091b      	lsrs	r3, r3, #4
 8001b42:	f003 030f 	and.w	r3, r3, #15
 8001b46:	490a      	ldr	r1, [pc, #40]	; (8001b70 <HAL_RCC_ClockConfig+0x1c0>)
 8001b48:	5ccb      	ldrb	r3, [r1, r3]
 8001b4a:	fa22 f303 	lsr.w	r3, r2, r3
 8001b4e:	4a09      	ldr	r2, [pc, #36]	; (8001b74 <HAL_RCC_ClockConfig+0x1c4>)
 8001b50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001b52:	4b09      	ldr	r3, [pc, #36]	; (8001b78 <HAL_RCC_ClockConfig+0x1c8>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4618      	mov	r0, r3
 8001b58:	f7ff fb7c 	bl	8001254 <HAL_InitTick>

  return HAL_OK;
 8001b5c:	2300      	movs	r3, #0
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	3710      	adds	r7, #16
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	40023c00 	.word	0x40023c00
 8001b6c:	40023800 	.word	0x40023800
 8001b70:	08001d78 	.word	0x08001d78
 8001b74:	20000000 	.word	0x20000000
 8001b78:	20000004 	.word	0x20000004

08001b7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b80:	b090      	sub	sp, #64	; 0x40
 8001b82:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001b84:	2300      	movs	r3, #0
 8001b86:	637b      	str	r3, [r7, #52]	; 0x34
 8001b88:	2300      	movs	r3, #0
 8001b8a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001b90:	2300      	movs	r3, #0
 8001b92:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b94:	4b59      	ldr	r3, [pc, #356]	; (8001cfc <HAL_RCC_GetSysClockFreq+0x180>)
 8001b96:	689b      	ldr	r3, [r3, #8]
 8001b98:	f003 030c 	and.w	r3, r3, #12
 8001b9c:	2b08      	cmp	r3, #8
 8001b9e:	d00d      	beq.n	8001bbc <HAL_RCC_GetSysClockFreq+0x40>
 8001ba0:	2b08      	cmp	r3, #8
 8001ba2:	f200 80a1 	bhi.w	8001ce8 <HAL_RCC_GetSysClockFreq+0x16c>
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d002      	beq.n	8001bb0 <HAL_RCC_GetSysClockFreq+0x34>
 8001baa:	2b04      	cmp	r3, #4
 8001bac:	d003      	beq.n	8001bb6 <HAL_RCC_GetSysClockFreq+0x3a>
 8001bae:	e09b      	b.n	8001ce8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001bb0:	4b53      	ldr	r3, [pc, #332]	; (8001d00 <HAL_RCC_GetSysClockFreq+0x184>)
 8001bb2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001bb4:	e09b      	b.n	8001cee <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001bb6:	4b53      	ldr	r3, [pc, #332]	; (8001d04 <HAL_RCC_GetSysClockFreq+0x188>)
 8001bb8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001bba:	e098      	b.n	8001cee <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001bbc:	4b4f      	ldr	r3, [pc, #316]	; (8001cfc <HAL_RCC_GetSysClockFreq+0x180>)
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001bc4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001bc6:	4b4d      	ldr	r3, [pc, #308]	; (8001cfc <HAL_RCC_GetSysClockFreq+0x180>)
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d028      	beq.n	8001c24 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bd2:	4b4a      	ldr	r3, [pc, #296]	; (8001cfc <HAL_RCC_GetSysClockFreq+0x180>)
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	099b      	lsrs	r3, r3, #6
 8001bd8:	2200      	movs	r2, #0
 8001bda:	623b      	str	r3, [r7, #32]
 8001bdc:	627a      	str	r2, [r7, #36]	; 0x24
 8001bde:	6a3b      	ldr	r3, [r7, #32]
 8001be0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001be4:	2100      	movs	r1, #0
 8001be6:	4b47      	ldr	r3, [pc, #284]	; (8001d04 <HAL_RCC_GetSysClockFreq+0x188>)
 8001be8:	fb03 f201 	mul.w	r2, r3, r1
 8001bec:	2300      	movs	r3, #0
 8001bee:	fb00 f303 	mul.w	r3, r0, r3
 8001bf2:	4413      	add	r3, r2
 8001bf4:	4a43      	ldr	r2, [pc, #268]	; (8001d04 <HAL_RCC_GetSysClockFreq+0x188>)
 8001bf6:	fba0 1202 	umull	r1, r2, r0, r2
 8001bfa:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001bfc:	460a      	mov	r2, r1
 8001bfe:	62ba      	str	r2, [r7, #40]	; 0x28
 8001c00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c02:	4413      	add	r3, r2
 8001c04:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c08:	2200      	movs	r2, #0
 8001c0a:	61bb      	str	r3, [r7, #24]
 8001c0c:	61fa      	str	r2, [r7, #28]
 8001c0e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c12:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001c16:	f7fe fed5 	bl	80009c4 <__aeabi_uldivmod>
 8001c1a:	4602      	mov	r2, r0
 8001c1c:	460b      	mov	r3, r1
 8001c1e:	4613      	mov	r3, r2
 8001c20:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001c22:	e053      	b.n	8001ccc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c24:	4b35      	ldr	r3, [pc, #212]	; (8001cfc <HAL_RCC_GetSysClockFreq+0x180>)
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	099b      	lsrs	r3, r3, #6
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	613b      	str	r3, [r7, #16]
 8001c2e:	617a      	str	r2, [r7, #20]
 8001c30:	693b      	ldr	r3, [r7, #16]
 8001c32:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001c36:	f04f 0b00 	mov.w	fp, #0
 8001c3a:	4652      	mov	r2, sl
 8001c3c:	465b      	mov	r3, fp
 8001c3e:	f04f 0000 	mov.w	r0, #0
 8001c42:	f04f 0100 	mov.w	r1, #0
 8001c46:	0159      	lsls	r1, r3, #5
 8001c48:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c4c:	0150      	lsls	r0, r2, #5
 8001c4e:	4602      	mov	r2, r0
 8001c50:	460b      	mov	r3, r1
 8001c52:	ebb2 080a 	subs.w	r8, r2, sl
 8001c56:	eb63 090b 	sbc.w	r9, r3, fp
 8001c5a:	f04f 0200 	mov.w	r2, #0
 8001c5e:	f04f 0300 	mov.w	r3, #0
 8001c62:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001c66:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001c6a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001c6e:	ebb2 0408 	subs.w	r4, r2, r8
 8001c72:	eb63 0509 	sbc.w	r5, r3, r9
 8001c76:	f04f 0200 	mov.w	r2, #0
 8001c7a:	f04f 0300 	mov.w	r3, #0
 8001c7e:	00eb      	lsls	r3, r5, #3
 8001c80:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001c84:	00e2      	lsls	r2, r4, #3
 8001c86:	4614      	mov	r4, r2
 8001c88:	461d      	mov	r5, r3
 8001c8a:	eb14 030a 	adds.w	r3, r4, sl
 8001c8e:	603b      	str	r3, [r7, #0]
 8001c90:	eb45 030b 	adc.w	r3, r5, fp
 8001c94:	607b      	str	r3, [r7, #4]
 8001c96:	f04f 0200 	mov.w	r2, #0
 8001c9a:	f04f 0300 	mov.w	r3, #0
 8001c9e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001ca2:	4629      	mov	r1, r5
 8001ca4:	028b      	lsls	r3, r1, #10
 8001ca6:	4621      	mov	r1, r4
 8001ca8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001cac:	4621      	mov	r1, r4
 8001cae:	028a      	lsls	r2, r1, #10
 8001cb0:	4610      	mov	r0, r2
 8001cb2:	4619      	mov	r1, r3
 8001cb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	60bb      	str	r3, [r7, #8]
 8001cba:	60fa      	str	r2, [r7, #12]
 8001cbc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001cc0:	f7fe fe80 	bl	80009c4 <__aeabi_uldivmod>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	460b      	mov	r3, r1
 8001cc8:	4613      	mov	r3, r2
 8001cca:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001ccc:	4b0b      	ldr	r3, [pc, #44]	; (8001cfc <HAL_RCC_GetSysClockFreq+0x180>)
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	0c1b      	lsrs	r3, r3, #16
 8001cd2:	f003 0303 	and.w	r3, r3, #3
 8001cd6:	3301      	adds	r3, #1
 8001cd8:	005b      	lsls	r3, r3, #1
 8001cda:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8001cdc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ce0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ce4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001ce6:	e002      	b.n	8001cee <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001ce8:	4b05      	ldr	r3, [pc, #20]	; (8001d00 <HAL_RCC_GetSysClockFreq+0x184>)
 8001cea:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001cec:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001cee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	3740      	adds	r7, #64	; 0x40
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001cfa:	bf00      	nop
 8001cfc:	40023800 	.word	0x40023800
 8001d00:	00f42400 	.word	0x00f42400
 8001d04:	017d7840 	.word	0x017d7840

08001d08 <__libc_init_array>:
 8001d08:	b570      	push	{r4, r5, r6, lr}
 8001d0a:	4d0d      	ldr	r5, [pc, #52]	; (8001d40 <__libc_init_array+0x38>)
 8001d0c:	4c0d      	ldr	r4, [pc, #52]	; (8001d44 <__libc_init_array+0x3c>)
 8001d0e:	1b64      	subs	r4, r4, r5
 8001d10:	10a4      	asrs	r4, r4, #2
 8001d12:	2600      	movs	r6, #0
 8001d14:	42a6      	cmp	r6, r4
 8001d16:	d109      	bne.n	8001d2c <__libc_init_array+0x24>
 8001d18:	4d0b      	ldr	r5, [pc, #44]	; (8001d48 <__libc_init_array+0x40>)
 8001d1a:	4c0c      	ldr	r4, [pc, #48]	; (8001d4c <__libc_init_array+0x44>)
 8001d1c:	f000 f820 	bl	8001d60 <_init>
 8001d20:	1b64      	subs	r4, r4, r5
 8001d22:	10a4      	asrs	r4, r4, #2
 8001d24:	2600      	movs	r6, #0
 8001d26:	42a6      	cmp	r6, r4
 8001d28:	d105      	bne.n	8001d36 <__libc_init_array+0x2e>
 8001d2a:	bd70      	pop	{r4, r5, r6, pc}
 8001d2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001d30:	4798      	blx	r3
 8001d32:	3601      	adds	r6, #1
 8001d34:	e7ee      	b.n	8001d14 <__libc_init_array+0xc>
 8001d36:	f855 3b04 	ldr.w	r3, [r5], #4
 8001d3a:	4798      	blx	r3
 8001d3c:	3601      	adds	r6, #1
 8001d3e:	e7f2      	b.n	8001d26 <__libc_init_array+0x1e>
 8001d40:	08001d90 	.word	0x08001d90
 8001d44:	08001d90 	.word	0x08001d90
 8001d48:	08001d90 	.word	0x08001d90
 8001d4c:	08001d94 	.word	0x08001d94

08001d50 <memset>:
 8001d50:	4402      	add	r2, r0
 8001d52:	4603      	mov	r3, r0
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d100      	bne.n	8001d5a <memset+0xa>
 8001d58:	4770      	bx	lr
 8001d5a:	f803 1b01 	strb.w	r1, [r3], #1
 8001d5e:	e7f9      	b.n	8001d54 <memset+0x4>

08001d60 <_init>:
 8001d60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d62:	bf00      	nop
 8001d64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001d66:	bc08      	pop	{r3}
 8001d68:	469e      	mov	lr, r3
 8001d6a:	4770      	bx	lr

08001d6c <_fini>:
 8001d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d6e:	bf00      	nop
 8001d70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001d72:	bc08      	pop	{r3}
 8001d74:	469e      	mov	lr, r3
 8001d76:	4770      	bx	lr
